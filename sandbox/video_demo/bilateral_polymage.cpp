#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <cmath>
#include <string.h>
#define isl_min(x,y) ((x) < (y) ? (x) : (y))
#define isl_max(x,y) ((x) > (y) ? (x) : (y))
#define isl_floord(n,d) (((n)<0) ? -((-(n)+(d)-1)/(d)) : (n)/(d))
extern "C" void  pipeline_bilateral(int  cols, int  rows, void * input_void_arg, void * filtered_void_arg)
{
  unsigned char * input;
  input = (unsigned char *) (input_void_arg);
  float * filtered;
  filtered = (float *) (filtered_void_arg);
  float * gray;
  gray = (float *) (malloc((sizeof(float ) * (rows * cols))));
  memset(gray, 0, (sizeof(float ) * (rows * cols)));
  float * grid;
  grid = (float *) (malloc((sizeof(float ) * (((2 * (((rows / 8) + 3) + 1)) * (((cols / 8) + 3) + 1)) * 14))));
  memset(grid, 0, (sizeof(float ) * (((2 * (((rows / 8) + 3) + 1)) * (((cols / 8) + 3) + 1)) * 14)));
  float * blurx;
  blurx = (float *) (malloc((sizeof(float ) * (((2 * (((rows / 8) + 3) + 1)) * (((cols / 8) + 3) + 1)) * 14))));
  memset(blurx, 0, (sizeof(float ) * (((2 * (((rows / 8) + 3) + 1)) * (((cols / 8) + 3) + 1)) * 14)));
  float * interpolated;
  interpolated = (float *) (malloc((sizeof(float ) * ((2 * rows) * cols))));
  memset(interpolated, 0, (sizeof(float ) * ((2 * rows) * cols)));
  for (int  _i1 = 0; (_i1 <= 1079); _i1 = (_i1 + 1))
  {
    for (int  _i2 = 0; (_i2 <= 1919); _i2 = (_i2 + 1))
    {
      gray[((_i1 * cols) + _i2)] = ((((input[((_i1 * (cols * 3)) + (_i2 * 3))] * 0.114f) + (input[(((_i1 * (cols * 3)) + (_i2 * 3)) + 1)] * 0.587f)) + (input[(((_i1 * (cols * 3)) + (_i2 * 3)) + 2)] * 0.299f)) / 256.0f);
    }
  }
  for (int  _i0 = 0; (_i0 <= 1); _i0 = (_i0 + 1))
  {
    for (int  _i1 = 0; (_i1 <= 138); _i1 = (_i1 + 1))
    {
      for (int  _i2 = 0; (_i2 <= 243); _i2 = (_i2 + 1))
      {
        for (int  _i3 = 0; (_i3 <= 13); _i3 = (_i3 + 1))
        {
          grid[((((_i0 * (((((rows / 8) + 3) + 1) * (((cols / 8) + 3) + 1)) * 14)) + (_i1 * ((((cols / 8) + 3) + 1) * 14))) + (_i2 * 14)) + _i3)] = 0;
        }
      }
    }
  }
  for (int  _i0 = 0; (_i0 <= 1079); _i0 = (_i0 + 1))
  {
    for (int  _i1 = 0; (_i1 <= 1919); _i1 = (_i1 + 1))
    {
      grid[((((1 * (((((rows / 8) + 3) + 1) * (((cols / 8) + 3) + 1)) * 14)) + ((2 + (_i0 / 8)) * ((((cols / 8) + 3) + 1) * 14))) + ((2 + (_i1 / 8)) * 14)) + (2 + (int ) ((gray[((_i0 * cols) + _i1)] * 10))))] = (grid[((((1 * (((((rows / 8) + 3) + 1) * (((cols / 8) + 3) + 1)) * 14)) + ((2 + (_i0 / 8)) * ((((cols / 8) + 3) + 1) * 14))) + ((2 + (_i1 / 8)) * 14)) + (2 + (int ) ((gray[((_i0 * cols) + _i1)] * 10))))] + 1);
      grid[((((0 * (((((rows / 8) + 3) + 1) * (((cols / 8) + 3) + 1)) * 14)) + ((2 + (_i0 / 8)) * ((((cols / 8) + 3) + 1) * 14))) + ((2 + (_i1 / 8)) * 14)) + (2 + (int ) ((gray[((_i0 * cols) + _i1)] * 10))))] = (grid[((((0 * (((((rows / 8) + 3) + 1) * (((cols / 8) + 3) + 1)) * 14)) + ((2 + (_i0 / 8)) * ((((cols / 8) + 3) + 1) * 14))) + ((2 + (_i1 / 8)) * 14)) + (2 + (int ) ((gray[((_i0 * cols) + _i1)] * 10))))] + gray[((_i0 * cols) + _i1)]);
    }
  }
  #pragma omp parallel for schedule(static)
  for (int  _T_i1 = -1; (_T_i1 <= 8); _T_i1 = (_T_i1 + 1))
  {
    float * blurz;
    blurz = (float *) (malloc((sizeof(float ) * (((2 * 20) * 128) * 14))));
    memset(blurz, 0, (sizeof(float ) * (((2 * 20) * 128) * 14)));
    for (int  _T_i2 = 0; (_T_i2 <= 1); _T_i2 = (_T_i2 + 1))
    {
      for (int  _i0 = 0; (_i0 <= 1); _i0 = (_i0 + 1))
      {
        int  _ct0 = ((136 < ((16 * _T_i1) + 19))? 136: ((16 * _T_i1) + 19));
        int  _ct1 = ((2 > (16 * _T_i1))? 2: (16 * _T_i1));
        for (int  _i1 = _ct1; (_i1 <= _ct0); _i1 = (_i1 + 1))
        {
          int  _ct2 = ((241 < ((128 * _T_i2) + 127))? 241: ((128 * _T_i2) + 127));
          int  _ct3 = ((2 > (128 * _T_i2))? 2: (128 * _T_i2));
          #pragma ivdep
          for (int  _i2 = _ct3; (_i2 <= _ct2); _i2 = (_i2 + 1))
          {
            for (int  _i3 = 2; (_i3 <= 11); _i3 = (_i3 + 1))
            {
              blurz[((((_i0 * (2560 * 14)) + (((-16 * _T_i1) + _i1) * (128 * 14))) + (((-128 * _T_i2) + _i2) * 14)) + _i3)] = ((((grid[((((_i0 * (((((rows / 8) + 3) + 1) * (((cols / 8) + 3) + 1)) * 14)) + (_i1 * ((((cols / 8) + 3) + 1) * 14))) + (_i2 * 14)) + (-2 + _i3))] + (4 * grid[((((_i0 * (((((rows / 8) + 3) + 1) * (((cols / 8) + 3) + 1)) * 14)) + (_i1 * ((((cols / 8) + 3) + 1) * 14))) + (_i2 * 14)) + (-1 + _i3))])) + (6 * grid[((((_i0 * (((((rows / 8) + 3) + 1) * (((cols / 8) + 3) + 1)) * 14)) + (_i1 * ((((cols / 8) + 3) + 1) * 14))) + (_i2 * 14)) + _i3)])) + (4 * grid[((((_i0 * (((((rows / 8) + 3) + 1) * (((cols / 8) + 3) + 1)) * 14)) + (_i1 * ((((cols / 8) + 3) + 1) * 14))) + (_i2 * 14)) + (1 + _i3))])) + grid[((((_i0 * (((((rows / 8) + 3) + 1) * (((cols / 8) + 3) + 1)) * 14)) + (_i1 * ((((cols / 8) + 3) + 1) * 14))) + (_i2 * 14)) + (2 + _i3))]);
            }
          }
        }
      }
      if ((_T_i1 >= 0))
      {
        for (int  _i0 = 0; (_i0 <= 1); _i0 = (_i0 + 1))
        {
          int  _ct4 = ((136 < ((16 * _T_i1) + 17))? 136: ((16 * _T_i1) + 17));
          for (int  _i1 = ((16 * _T_i1) + 2); (_i1 <= _ct4); _i1 = (_i1 + 1))
          {
            int  _ct5 = ((241 < ((128 * _T_i2) + 127))? 241: ((128 * _T_i2) + 127));
            int  _ct6 = ((2 > (128 * _T_i2))? 2: (128 * _T_i2));
            #pragma ivdep
            for (int  _i2 = _ct6; (_i2 <= _ct5); _i2 = (_i2 + 1))
            {
              for (int  _i3 = 2; (_i3 <= 11); _i3 = (_i3 + 1))
              {
                blurx[((((_i0 * (((((rows / 8) + 3) + 1) * (((cols / 8) + 3) + 1)) * 14)) + (_i1 * ((((cols / 8) + 3) + 1) * 14))) + (_i2 * 14)) + _i3)] = ((((blurz[((((_i0 * (2560 * 14)) + ((-2 + ((-16 * _T_i1) + _i1)) * (128 * 14))) + (((-128 * _T_i2) + _i2) * 14)) + _i3)] + (4 * blurz[((((_i0 * (2560 * 14)) + ((-1 + ((-16 * _T_i1) + _i1)) * (128 * 14))) + (((-128 * _T_i2) + _i2) * 14)) + _i3)])) + (6 * blurz[((((_i0 * (2560 * 14)) + (((-16 * _T_i1) + _i1) * (128 * 14))) + (((-128 * _T_i2) + _i2) * 14)) + _i3)])) + (4 * blurz[((((_i0 * (2560 * 14)) + ((1 + ((-16 * _T_i1) + _i1)) * (128 * 14))) + (((-128 * _T_i2) + _i2) * 14)) + _i3)])) + blurz[((((_i0 * (2560 * 14)) + ((2 + ((-16 * _T_i1) + _i1)) * (128 * 14))) + (((-128 * _T_i2) + _i2) * 14)) + _i3)]);
              }
            }
          }
        }
      }
    }
    free(blurz);
  }
  #pragma omp parallel for schedule(static)
  for (int  _T_i1 = -1; (_T_i1 <= 68); _T_i1 = (_T_i1 + 1))
  {
    float * blury;
    blury = (float *) (malloc((sizeof(float ) * (((2 * 5) * 19) * 14))));
    memset(blury, 0, (sizeof(float ) * (((2 * 5) * 19) * 14)));
    for (int  _T_i2 = -1; (_T_i2 <= 15); _T_i2 = (_T_i2 + 1))
    {
      for (int  _i0 = 0; (_i0 <= 1); _i0 = (_i0 + 1))
      {
        int  _ct7 = ((136 < ((2 * _T_i1) + 4))? 136: ((2 * _T_i1) + 4));
        int  _ct8 = ((2 > (2 * _T_i1))? 2: (2 * _T_i1));
        for (int  _i1 = _ct8; (_i1 <= _ct7); _i1 = (_i1 + 1))
        {
          int  _ct9 = ((241 < ((16 * _T_i2) + 18))? 241: ((16 * _T_i2) + 18));
          int  _ct10 = ((2 > (16 * _T_i2))? 2: (16 * _T_i2));
          #pragma ivdep
          for (int  _i2 = _ct10; (_i2 <= _ct9); _i2 = (_i2 + 1))
          {
            for (int  _i3 = 2; (_i3 <= 11); _i3 = (_i3 + 1))
            {
              blury[((((_i0 * (95 * 14)) + (((-2 * _T_i1) + _i1) * (19 * 14))) + (((-16 * _T_i2) + _i2) * 14)) + _i3)] = ((((blurx[((((_i0 * (((((rows / 8) + 3) + 1) * (((cols / 8) + 3) + 1)) * 14)) + (_i1 * ((((cols / 8) + 3) + 1) * 14))) + ((-2 + _i2) * 14)) + _i3)] + (4 * blurx[((((_i0 * (((((rows / 8) + 3) + 1) * (((cols / 8) + 3) + 1)) * 14)) + (_i1 * ((((cols / 8) + 3) + 1) * 14))) + ((-1 + _i2) * 14)) + _i3)])) + (6 * blurx[((((_i0 * (((((rows / 8) + 3) + 1) * (((cols / 8) + 3) + 1)) * 14)) + (_i1 * ((((cols / 8) + 3) + 1) * 14))) + (_i2 * 14)) + _i3)])) + (4 * blurx[((((_i0 * (((((rows / 8) + 3) + 1) * (((cols / 8) + 3) + 1)) * 14)) + (_i1 * ((((cols / 8) + 3) + 1) * 14))) + ((1 + _i2) * 14)) + _i3)])) + blurx[((((_i0 * (((((rows / 8) + 3) + 1) * (((cols / 8) + 3) + 1)) * 14)) + (_i1 * ((((cols / 8) + 3) + 1) * 14))) + ((2 + _i2) * 14)) + _i3)]);
            }
          }
        }
      }
      if ((((_T_i2 <= 14) && (_T_i2 >= 0)) && (_T_i1 >= 0)))
      {
        for (int  _i0 = 0; (_i0 <= 1); _i0 = (_i0 + 1))
        {
          int  _ct11 = ((1079 < ((16 * _T_i1) + 15))? 1079: ((16 * _T_i1) + 15));
          for (int  _i1 = (16 * _T_i1); (_i1 <= _ct11); _i1 = (_i1 + 1))
          {
            #pragma ivdep
            for (int  _i2 = (128 * _T_i2); (_i2 <= ((128 * _T_i2) + 127)); _i2 = (_i2 + 1))
            {
              interpolated[(((_i0 * (rows * cols)) + (_i1 * cols)) + _i2)] = (((blury[((((_i0 * (95 * 14)) + ((2 + (((-16 * _T_i1) + _i1) / 8)) * (19 * 14))) + ((2 + (((-128 * _T_i2) + _i2) / 8)) * 14)) + (2 + (int ) ((gray[((_i1 * cols) + _i2)] * 10))))] + (((float ) ((_i1 % 8)) / 8) * (blury[((((_i0 * (95 * 14)) + (((2 + (((-16 * _T_i1) + _i1) / 8)) + 1) * (19 * 14))) + ((2 + (((-128 * _T_i2) + _i2) / 8)) * 14)) + (2 + (int ) ((gray[((_i1 * cols) + _i2)] * 10))))] - blury[((((_i0 * (95 * 14)) + ((2 + (((-16 * _T_i1) + _i1) / 8)) * (19 * 14))) + ((2 + (((-128 * _T_i2) + _i2) / 8)) * 14)) + (2 + (int ) ((gray[((_i1 * cols) + _i2)] * 10))))]))) + (((float ) ((_i2 % 8)) / 8) * ((blury[((((_i0 * (95 * 14)) + ((2 + (((-16 * _T_i1) + _i1) / 8)) * (19 * 14))) + (((2 + (((-128 * _T_i2) + _i2) / 8)) + 1) * 14)) + (2 + (int ) ((gray[((_i1 * cols) + _i2)] * 10))))] + (((float ) ((_i1 % 8)) / 8) * (blury[((((_i0 * (95 * 14)) + (((2 + (((-16 * _T_i1) + _i1) / 8)) + 1) * (19 * 14))) + (((2 + (((-128 * _T_i2) + _i2) / 8)) + 1) * 14)) + (2 + (int ) ((gray[((_i1 * cols) + _i2)] * 10))))] - blury[((((_i0 * (95 * 14)) + ((2 + (((-16 * _T_i1) + _i1) / 8)) * (19 * 14))) + (((2 + (((-128 * _T_i2) + _i2) / 8)) + 1) * 14)) + (2 + (int ) ((gray[((_i1 * cols) + _i2)] * 10))))]))) - (blury[((((_i0 * (95 * 14)) + ((2 + (((-16 * _T_i1) + _i1) / 8)) * (19 * 14))) + ((2 + (((-128 * _T_i2) + _i2) / 8)) * 14)) + (2 + (int ) ((gray[((_i1 * cols) + _i2)] * 10))))] + (((float ) ((_i1 % 8)) / 8) * (blury[((((_i0 * (95 * 14)) + (((2 + (((-16 * _T_i1) + _i1) / 8)) + 1) * (19 * 14))) + ((2 + (((-128 * _T_i2) + _i2) / 8)) * 14)) + (2 + (int ) ((gray[((_i1 * cols) + _i2)] * 10))))] - blury[((((_i0 * (95 * 14)) + ((2 + (((-16 * _T_i1) + _i1) / 8)) * (19 * 14))) + ((2 + (((-128 * _T_i2) + _i2) / 8)) * 14)) + (2 + (int ) ((gray[((_i1 * cols) + _i2)] * 10))))])))))) + (((gray[((_i1 * cols) + _i2)] * 10) - (int ) ((gray[((_i1 * cols) + _i2)] * 10))) * (((blury[((((_i0 * (95 * 14)) + ((2 + (((-16 * _T_i1) + _i1) / 8)) * (19 * 14))) + ((2 + (((-128 * _T_i2) + _i2) / 8)) * 14)) + ((2 + (int ) ((gray[((_i1 * cols) + _i2)] * 10))) + 1))] + (((float ) ((_i1 % 8)) / 8) * (blury[((((_i0 * (95 * 14)) + (((2 + (((-16 * _T_i1) + _i1) / 8)) + 1) * (19 * 14))) + ((2 + (((-128 * _T_i2) + _i2) / 8)) * 14)) + ((2 + (int ) ((gray[((_i1 * cols) + _i2)] * 10))) + 1))] - blury[((((_i0 * (95 * 14)) + ((2 + (((-16 * _T_i1) + _i1) / 8)) * (19 * 14))) + ((2 + (((-128 * _T_i2) + _i2) / 8)) * 14)) + ((2 + (int ) ((gray[((_i1 * cols) + _i2)] * 10))) + 1))]))) + (((float ) ((_i2 % 8)) / 8) * ((blury[((((_i0 * (95 * 14)) + ((2 + (((-16 * _T_i1) + _i1) / 8)) * (19 * 14))) + (((2 + (((-128 * _T_i2) + _i2) / 8)) + 1) * 14)) + ((2 + (int ) ((gray[((_i1 * cols) + _i2)] * 10))) + 1))] + (((float ) ((_i1 % 8)) / 8) * (blury[((((_i0 * (95 * 14)) + (((2 + (((-16 * _T_i1) + _i1) / 8)) + 1) * (19 * 14))) + (((2 + (((-128 * _T_i2) + _i2) / 8)) + 1) * 14)) + ((2 + (int ) ((gray[((_i1 * cols) + _i2)] * 10))) + 1))] - blury[((((_i0 * (95 * 14)) + ((2 + (((-16 * _T_i1) + _i1) / 8)) * (19 * 14))) + (((2 + (((-128 * _T_i2) + _i2) / 8)) + 1) * 14)) + ((2 + (int ) ((gray[((_i1 * cols) + _i2)] * 10))) + 1))]))) - (blury[((((_i0 * (95 * 14)) + ((2 + (((-16 * _T_i1) + _i1) / 8)) * (19 * 14))) + ((2 + (((-128 * _T_i2) + _i2) / 8)) * 14)) + ((2 + (int ) ((gray[((_i1 * cols) + _i2)] * 10))) + 1))] + (((float ) ((_i1 % 8)) / 8) * (blury[((((_i0 * (95 * 14)) + (((2 + (((-16 * _T_i1) + _i1) / 8)) + 1) * (19 * 14))) + ((2 + (((-128 * _T_i2) + _i2) / 8)) * 14)) + ((2 + (int ) ((gray[((_i1 * cols) + _i2)] * 10))) + 1))] - blury[((((_i0 * (95 * 14)) + ((2 + (((-16 * _T_i1) + _i1) / 8)) * (19 * 14))) + ((2 + (((-128 * _T_i2) + _i2) / 8)) * 14)) + ((2 + (int ) ((gray[((_i1 * cols) + _i2)] * 10))) + 1))])))))) - ((blury[((((_i0 * (95 * 14)) + ((2 + (((-16 * _T_i1) + _i1) / 8)) * (19 * 14))) + ((2 + (((-128 * _T_i2) + _i2) / 8)) * 14)) + (2 + (int ) ((gray[((_i1 * cols) + _i2)] * 10))))] + (((float ) ((_i1 % 8)) / 8) * (blury[((((_i0 * (95 * 14)) + (((2 + (((-16 * _T_i1) + _i1) / 8)) + 1) * (19 * 14))) + ((2 + (((-128 * _T_i2) + _i2) / 8)) * 14)) + (2 + (int ) ((gray[((_i1 * cols) + _i2)] * 10))))] - blury[((((_i0 * (95 * 14)) + ((2 + (((-16 * _T_i1) + _i1) / 8)) * (19 * 14))) + ((2 + (((-128 * _T_i2) + _i2) / 8)) * 14)) + (2 + (int ) ((gray[((_i1 * cols) + _i2)] * 10))))]))) + (((float ) ((_i2 % 8)) / 8) * ((blury[((((_i0 * (95 * 14)) + ((2 + (((-16 * _T_i1) + _i1) / 8)) * (19 * 14))) + (((2 + (((-128 * _T_i2) + _i2) / 8)) + 1) * 14)) + (2 + (int ) ((gray[((_i1 * cols) + _i2)] * 10))))] + (((float ) ((_i1 % 8)) / 8) * (blury[((((_i0 * (95 * 14)) + (((2 + (((-16 * _T_i1) + _i1) / 8)) + 1) * (19 * 14))) + (((2 + (((-128 * _T_i2) + _i2) / 8)) + 1) * 14)) + (2 + (int ) ((gray[((_i1 * cols) + _i2)] * 10))))] - blury[((((_i0 * (95 * 14)) + ((2 + (((-16 * _T_i1) + _i1) / 8)) * (19 * 14))) + (((2 + (((-128 * _T_i2) + _i2) / 8)) + 1) * 14)) + (2 + (int ) ((gray[((_i1 * cols) + _i2)] * 10))))]))) - (blury[((((_i0 * (95 * 14)) + ((2 + (((-16 * _T_i1) + _i1) / 8)) * (19 * 14))) + ((2 + (((-128 * _T_i2) + _i2) / 8)) * 14)) + (2 + (int ) ((gray[((_i1 * cols) + _i2)] * 10))))] + (((float ) ((_i1 % 8)) / 8) * (blury[((((_i0 * (95 * 14)) + (((2 + (((-16 * _T_i1) + _i1) / 8)) + 1) * (19 * 14))) + ((2 + (((-128 * _T_i2) + _i2) / 8)) * 14)) + (2 + (int ) ((gray[((_i1 * cols) + _i2)] * 10))))] - blury[((((_i0 * (95 * 14)) + ((2 + (((-16 * _T_i1) + _i1) / 8)) * (19 * 14))) + ((2 + (((-128 * _T_i2) + _i2) / 8)) * 14)) + (2 + (int ) ((gray[((_i1 * cols) + _i2)] * 10))))])))))))));
            }
          }
        }
      }
    }
    free(blury);
  }
  for (int  _i1 = 0; (_i1 <= 1079); _i1 = (_i1 + 1))
  {
    for (int  _i2 = 0; (_i2 <= 1919); _i2 = (_i2 + 1))
    {
      float  _ct12 = (interpolated[(((0 * (rows * cols)) + (_i1 * cols)) + _i2)] / interpolated[(((1 * (rows * cols)) + (_i1 * cols)) + _i2)]);
      float  _ct13 = gray[((_i1 * cols) + _i2)];
      float  _ct14 = ((interpolated[(((1 * (rows * cols)) + (_i1 * cols)) + _i2)] > 0)? _ct12: _ct13);
      filtered[((0 + (_i1 * cols)) + _i2)] = _ct14;
    }
  }
  free(gray);
  free(grid);
  free(blurx);
  free(interpolated);
}
