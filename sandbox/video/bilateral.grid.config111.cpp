#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <cmath>
#include <string.h>
#define isl_min(x,y) ((x) < (y) ? (x) : (y))
#define isl_max(x,y) ((x) > (y) ? (x) : (y))
#define isl_floord(n,d) (((n)<0) ? -((-(n)+(d)-1)/(d)) : (n)/(d))
void  pipeline_filtered(int  cols, int  rows, float * input, float *& filtered)
{
  float * grid;
  grid = (float *) (malloc((sizeof(float ) * (((2 * (((rows / 8) + 3) + 1)) * (((cols / 8) + 3) + 1)) * 14))));
  filtered = (float *) (malloc((sizeof(float ) * ((1 * rows) * cols))));
  for (int  _i0 = 0; (_i0 <= 1); _i0 = (_i0 + 1))
  {
    for (int  _i1 = 0; (_i1 <= 323); _i1 = (_i1 + 1))
    {
      for (int  _i2 = 0; (_i2 <= 195); _i2 = (_i2 + 1))
      {
        for (int  _i3 = 0; (_i3 <= 13); _i3 = (_i3 + 1))
        {
          grid[((((_i0 * (((((rows / 8) + 3) + 1) * (((cols / 8) + 3) + 1)) * 14)) + (_i1 * ((((cols / 8) + 3) + 1) * 14))) + (_i2 * 14)) + _i3)] = 0;
        }
      }
    }
  }
  #pragma omp parallel for schedule(static)
  for (int  _i0 = 0; (_i0 <= 2559); _i0 = (_i0 + 1))
  {
    for (int  _i1 = 0; (_i1 <= 1535); _i1 = (_i1 + 1))
    {
      grid[((((1 * (((((rows / 8) + 3) + 1) * (((cols / 8) + 3) + 1)) * 14)) + ((2 + (_i0 / 8)) * ((((cols / 8) + 3) + 1) * 14))) + ((2 + (_i1 / 8)) * 14)) + (2 + (int ) ((input[((_i0 * cols) + _i1)] * 10))))] = (grid[((((1 * (((((rows / 8) + 3) + 1) * (((cols / 8) + 3) + 1)) * 14)) + ((2 + (_i0 / 8)) * ((((cols / 8) + 3) + 1) * 14))) + ((2 + (_i1 / 8)) * 14)) + (2 + (int ) ((input[((_i0 * cols) + _i1)] * 10))))] + 1);
      grid[((((0 * (((((rows / 8) + 3) + 1) * (((cols / 8) + 3) + 1)) * 14)) + ((2 + (_i0 / 8)) * ((((cols / 8) + 3) + 1) * 14))) + ((2 + (_i1 / 8)) * 14)) + (2 + (int ) ((input[((_i0 * cols) + _i1)] * 10))))] = (grid[((((0 * (((((rows / 8) + 3) + 1) * (((cols / 8) + 3) + 1)) * 14)) + ((2 + (_i0 / 8)) * ((((cols / 8) + 3) + 1) * 14))) + ((2 + (_i1 / 8)) * 14)) + (2 + (int ) ((input[((_i0 * cols) + _i1)] * 10))))] + input[((_i0 * cols) + _i1)]);
    }
  }
  #pragma omp parallel for schedule(static)
  for (int  _T_i1 = -1; (_T_i1 <= 40); _T_i1 = (_T_i1 + 1))
  {
    float  blurz[2][16][74][14];
    float  blurx[2][16][74][14];
    float  blury[2][16][74][14];
    float  interpolated[2][128][592];
    for (int  _T_i2 = -1; (_T_i2 <= 3); _T_i2 = (_T_i2 + 1))
    {
      for (int  _i0 = 0; (_i0 <= 1); _i0 = (_i0 + 1))
      {
        int  _ct0 = ((321 < ((8 * _T_i1) + 15))? 321: ((8 * _T_i1) + 15));
        int  _ct1 = ((2 > (8 * _T_i1))? 2: (8 * _T_i1));
        for (int  _i1 = _ct1; (_i1 <= _ct0); _i1 = (_i1 + 1))
        {
          int  _ct2 = ((193 < ((64 * _T_i2) + 73))? 193: ((64 * _T_i2) + 73));
          int  _ct3 = ((2 > (64 * _T_i2))? 2: (64 * _T_i2));
          for (int  _i2 = _ct3; (_i2 <= _ct2); _i2 = (_i2 + 1))
          {
          //#pragma ivdep
          #pragma simd
            for (int  _i3 = 2; (_i3 <= 11); _i3 = (_i3 + 1))
            {
              blurz[_i0][((-8 * _T_i1) + _i1)][((-64 * _T_i2) + _i2)][_i3] = ((((grid[((((_i0 * (((((rows / 8) + 3) + 1) * (((cols / 8) + 3) + 1)) * 14)) + (_i1 * ((((cols / 8) + 3) + 1) * 14))) + (_i2 * 14)) + (-2 + _i3))] + (4 * grid[((((_i0 * (((((rows / 8) + 3) + 1) * (((cols / 8) + 3) + 1)) * 14)) + (_i1 * ((((cols / 8) + 3) + 1) * 14))) + (_i2 * 14)) + (-1 + _i3))])) + (6 * grid[((((_i0 * (((((rows / 8) + 3) + 1) * (((cols / 8) + 3) + 1)) * 14)) + (_i1 * ((((cols / 8) + 3) + 1) * 14))) + (_i2 * 14)) + _i3)])) + (4 * grid[((((_i0 * (((((rows / 8) + 3) + 1) * (((cols / 8) + 3) + 1)) * 14)) + (_i1 * ((((cols / 8) + 3) + 1) * 14))) + (_i2 * 14)) + (1 + _i3))])) + grid[((((_i0 * (((((rows / 8) + 3) + 1) * (((cols / 8) + 3) + 1)) * 14)) + (_i1 * ((((cols / 8) + 3) + 1) * 14))) + (_i2 * 14)) + (2 + _i3))]);
            }
          }
        }
      }
      for (int  _i0 = 0; (_i0 <= 1); _i0 = (_i0 + 1))
      {
        int  _ct4 = ((321 < ((8 * _T_i1) + 14))? 321: ((8 * _T_i1) + 14));
        int  _ct5 = ((2 > ((8 * _T_i1) + 1))? 2: ((8 * _T_i1) + 1));
        for (int  _i1 = _ct5; (_i1 <= _ct4); _i1 = (_i1 + 1))
        {
          int  _ct6 = ((193 < ((64 * _T_i2) + 72))? 193: ((64 * _T_i2) + 72));
          int  _ct7 = ((2 > ((64 * _T_i2) + 1))? 2: ((64 * _T_i2) + 1));
          for (int  _i2 = _ct7; (_i2 <= _ct6); _i2 = (_i2 + 1))
          {
          //#pragma ivdep
          #pragma simd
            for (int  _i3 = 2; (_i3 <= 11); _i3 = (_i3 + 1))
            {
              blurx[_i0][((-8 * _T_i1) + _i1)][((-64 * _T_i2) + _i2)][_i3] = ((((blurz[_i0][(-2 + ((-8 * _T_i1) + _i1))][((-64 * _T_i2) + _i2)][_i3] + (4 * blurz[_i0][(-1 + ((-8 * _T_i1) + _i1))][((-64 * _T_i2) + _i2)][_i3])) + (6 * blurz[_i0][((-8 * _T_i1) + _i1)][((-64 * _T_i2) + _i2)][_i3])) + (4 * blurz[_i0][(1 + ((-8 * _T_i1) + _i1))][((-64 * _T_i2) + _i2)][_i3])) + blurz[_i0][(2 + ((-8 * _T_i1) + _i1))][((-64 * _T_i2) + _i2)][_i3]);
            }
          }
        }
      }
      for (int  _i0 = 0; (_i0 <= 1); _i0 = (_i0 + 1))
      {
        int  _ct8 = ((321 < ((8 * _T_i1) + 12))? 321: ((8 * _T_i1) + 12));
        int  _ct9 = ((2 > ((8 * _T_i1) + 1))? 2: ((8 * _T_i1) + 1));
        for (int  _i1 = _ct9; (_i1 <= _ct8); _i1 = (_i1 + 1))
        {
          int  _ct10 = ((193 < ((64 * _T_i2) + 70))? 193: ((64 * _T_i2) + 70));
          int  _ct11 = ((2 > ((64 * _T_i2) + 2))? 2: ((64 * _T_i2) + 2));
          for (int  _i2 = _ct11; (_i2 <= _ct10); _i2 = (_i2 + 1))
          {
          //#pragma ivdep
          #pragma simd
            for (int  _i3 = 2; (_i3 <= 11); _i3 = (_i3 + 1))
            {
              blury[_i0][((-8 * _T_i1) + _i1)][((-64 * _T_i2) + _i2)][_i3] = ((((blurx[_i0][((-8 * _T_i1) + _i1)][(-2 + ((-64 * _T_i2) + _i2))][_i3] + (4 * blurx[_i0][((-8 * _T_i1) + _i1)][(-1 + ((-64 * _T_i2) + _i2))][_i3])) + (6 * blurx[_i0][((-8 * _T_i1) + _i1)][((-64 * _T_i2) + _i2)][_i3])) + (4 * blurx[_i0][((-8 * _T_i1) + _i1)][(1 + ((-64 * _T_i2) + _i2))][_i3])) + blurx[_i0][((-8 * _T_i1) + _i1)][(2 + ((-64 * _T_i2) + _i2))][_i3]);
            }
          }
        }
      }
      for (int  _i0 = 0; (_i0 <= 1); _i0 = (_i0 + 1))
      {
        int  _ct12 = ((2559 < ((64 * _T_i1) + 91))? 2559: ((64 * _T_i1) + 91));
        int  _ct13 = ((0 > ((64 * _T_i1) + 12))? 0: ((64 * _T_i1) + 12));
        for (int  _i1 = _ct13; (_i1 <= _ct12); _i1 = (_i1 + 1))
        {
          int  _ct14 = ((1535 < ((512 * _T_i2) + 549))? 1535: ((512 * _T_i2) + 549));
          int  _ct15 = ((0 > ((512 * _T_i2) + 18))? 0: ((512 * _T_i2) + 18));
          #pragma ivdep
          for (int  _i2 = _ct15; (_i2 <= _ct14); _i2 = (_i2 + 1))
          {
            interpolated[_i0][((-64 * _T_i1) + _i1)][((-512 * _T_i2) + _i2)] = (((blury[_i0][(2 + (((-64 * _T_i1) + _i1) / 8))][(2 + (((-512 * _T_i2) + _i2) / 8))][(2 + (int ) ((input[((_i1 * cols) + _i2)] * 10)))] + (((float ) ((_i1 % 8)) / 8) * (blury[_i0][((2 + (((-64 * _T_i1) + _i1) / 8)) + 1)][(2 + (((-512 * _T_i2) + _i2) / 8))][(2 + (int ) ((input[((_i1 * cols) + _i2)] * 10)))] - blury[_i0][(2 + (((-64 * _T_i1) + _i1) / 8))][(2 + (((-512 * _T_i2) + _i2) / 8))][(2 + (int ) ((input[((_i1 * cols) + _i2)] * 10)))]))) + (((float ) ((_i2 % 8)) / 8) * ((blury[_i0][(2 + (((-64 * _T_i1) + _i1) / 8))][((2 + (((-512 * _T_i2) + _i2) / 8)) + 1)][(2 + (int ) ((input[((_i1 * cols) + _i2)] * 10)))] + (((float ) ((_i1 % 8)) / 8) * (blury[_i0][((2 + (((-64 * _T_i1) + _i1) / 8)) + 1)][((2 + (((-512 * _T_i2) + _i2) / 8)) + 1)][(2 + (int ) ((input[((_i1 * cols) + _i2)] * 10)))] - blury[_i0][(2 + (((-64 * _T_i1) + _i1) / 8))][((2 + (((-512 * _T_i2) + _i2) / 8)) + 1)][(2 + (int ) ((input[((_i1 * cols) + _i2)] * 10)))]))) - (blury[_i0][(2 + (((-64 * _T_i1) + _i1) / 8))][(2 + (((-512 * _T_i2) + _i2) / 8))][(2 + (int ) ((input[((_i1 * cols) + _i2)] * 10)))] + (((float ) ((_i1 % 8)) / 8) * (blury[_i0][((2 + (((-64 * _T_i1) + _i1) / 8)) + 1)][(2 + (((-512 * _T_i2) + _i2) / 8))][(2 + (int ) ((input[((_i1 * cols) + _i2)] * 10)))] - blury[_i0][(2 + (((-64 * _T_i1) + _i1) / 8))][(2 + (((-512 * _T_i2) + _i2) / 8))][(2 + (int ) ((input[((_i1 * cols) + _i2)] * 10)))])))))) + (((input[((_i1 * cols) + _i2)] * 10) - (int ) ((input[((_i1 * cols) + _i2)] * 10))) * (((blury[_i0][(2 + (((-64 * _T_i1) + _i1) / 8))][(2 + (((-512 * _T_i2) + _i2) / 8))][((2 + (int ) ((input[((_i1 * cols) + _i2)] * 10))) + 1)] + (((float ) ((_i1 % 8)) / 8) * (blury[_i0][((2 + (((-64 * _T_i1) + _i1) / 8)) + 1)][(2 + (((-512 * _T_i2) + _i2) / 8))][((2 + (int ) ((input[((_i1 * cols) + _i2)] * 10))) + 1)] - blury[_i0][(2 + (((-64 * _T_i1) + _i1) / 8))][(2 + (((-512 * _T_i2) + _i2) / 8))][((2 + (int ) ((input[((_i1 * cols) + _i2)] * 10))) + 1)]))) + (((float ) ((_i2 % 8)) / 8) * ((blury[_i0][(2 + (((-64 * _T_i1) + _i1) / 8))][((2 + (((-512 * _T_i2) + _i2) / 8)) + 1)][((2 + (int ) ((input[((_i1 * cols) + _i2)] * 10))) + 1)] + (((float ) ((_i1 % 8)) / 8) * (blury[_i0][((2 + (((-64 * _T_i1) + _i1) / 8)) + 1)][((2 + (((-512 * _T_i2) + _i2) / 8)) + 1)][((2 + (int ) ((input[((_i1 * cols) + _i2)] * 10))) + 1)] - blury[_i0][(2 + (((-64 * _T_i1) + _i1) / 8))][((2 + (((-512 * _T_i2) + _i2) / 8)) + 1)][((2 + (int ) ((input[((_i1 * cols) + _i2)] * 10))) + 1)]))) - (blury[_i0][(2 + (((-64 * _T_i1) + _i1) / 8))][(2 + (((-512 * _T_i2) + _i2) / 8))][((2 + (int ) ((input[((_i1 * cols) + _i2)] * 10))) + 1)] + (((float ) ((_i1 % 8)) / 8) * (blury[_i0][((2 + (((-64 * _T_i1) + _i1) / 8)) + 1)][(2 + (((-512 * _T_i2) + _i2) / 8))][((2 + (int ) ((input[((_i1 * cols) + _i2)] * 10))) + 1)] - blury[_i0][(2 + (((-64 * _T_i1) + _i1) / 8))][(2 + (((-512 * _T_i2) + _i2) / 8))][((2 + (int ) ((input[((_i1 * cols) + _i2)] * 10))) + 1)])))))) - ((blury[_i0][(2 + (((-64 * _T_i1) + _i1) / 8))][(2 + (((-512 * _T_i2) + _i2) / 8))][(2 + (int ) ((input[((_i1 * cols) + _i2)] * 10)))] + (((float ) ((_i1 % 8)) / 8) * (blury[_i0][((2 + (((-64 * _T_i1) + _i1) / 8)) + 1)][(2 + (((-512 * _T_i2) + _i2) / 8))][(2 + (int ) ((input[((_i1 * cols) + _i2)] * 10)))] - blury[_i0][(2 + (((-64 * _T_i1) + _i1) / 8))][(2 + (((-512 * _T_i2) + _i2) / 8))][(2 + (int ) ((input[((_i1 * cols) + _i2)] * 10)))]))) + (((float ) ((_i2 % 8)) / 8) * ((blury[_i0][(2 + (((-64 * _T_i1) + _i1) / 8))][((2 + (((-512 * _T_i2) + _i2) / 8)) + 1)][(2 + (int ) ((input[((_i1 * cols) + _i2)] * 10)))] + (((float ) ((_i1 % 8)) / 8) * (blury[_i0][((2 + (((-64 * _T_i1) + _i1) / 8)) + 1)][((2 + (((-512 * _T_i2) + _i2) / 8)) + 1)][(2 + (int ) ((input[((_i1 * cols) + _i2)] * 10)))] - blury[_i0][(2 + (((-64 * _T_i1) + _i1) / 8))][((2 + (((-512 * _T_i2) + _i2) / 8)) + 1)][(2 + (int ) ((input[((_i1 * cols) + _i2)] * 10)))]))) - (blury[_i0][(2 + (((-64 * _T_i1) + _i1) / 8))][(2 + (((-512 * _T_i2) + _i2) / 8))][(2 + (int ) ((input[((_i1 * cols) + _i2)] * 10)))] + (((float ) ((_i1 % 8)) / 8) * (blury[_i0][((2 + (((-64 * _T_i1) + _i1) / 8)) + 1)][(2 + (((-512 * _T_i2) + _i2) / 8))][(2 + (int ) ((input[((_i1 * cols) + _i2)] * 10)))] - blury[_i0][(2 + (((-64 * _T_i1) + _i1) / 8))][(2 + (((-512 * _T_i2) + _i2) / 8))][(2 + (int ) ((input[((_i1 * cols) + _i2)] * 10)))])))))))));
          }
        }
      }
      int  _ct16 = ((2559 < ((64 * _T_i1) + 79))? 2559: ((64 * _T_i1) + 79));
      int  _ct17 = ((0 > ((64 * _T_i1) + 16))? 0: ((64 * _T_i1) + 16));
      for (int  _i1 = _ct17; (_i1 <= _ct16); _i1 = (_i1 + 1))
      {
        int  _ct18 = ((1535 < ((512 * _T_i2) + 535))? 1535: ((512 * _T_i2) + 535));
        int  _ct19 = ((0 > ((512 * _T_i2) + 24))? 0: ((512 * _T_i2) + 24));
        #pragma ivdep
        for (int  _i2 = _ct19; (_i2 <= _ct18); _i2 = (_i2 + 1))
        {
          float  _ct20 = (interpolated[0][((-64 * _T_i1) + _i1)][((-512 * _T_i2) + _i2)] / interpolated[1][((-64 * _T_i1) + _i1)][((-512 * _T_i2) + _i2)]);
          float  _ct21 = input[((_i1 * cols) + _i2)];
          float  _ct22 = ((interpolated[1][((-64 * _T_i1) + _i1)][((-512 * _T_i2) + _i2)] > 0)? _ct20: _ct21);
          filtered[((0 + (_i1 * cols)) + _i2)] = _ct22;
        }
      }
    }
  }
  free(grid);
}
