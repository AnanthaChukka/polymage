#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <cmath>
#include <string.h>
#include <simple_pool_allocator.h>
#define isl_min(x,y) ((x) < (y) ? (x) : (y))
#define isl_max(x,y) ((x) > (y) ? (x) : (y))
#define isl_floord(n,d) (((n)<0) ? -((-(n)+(d)-1)/(d)) : (n)/(d))
extern "C" void pipeline_pyramid_blend(int C, int R, void * img1_void_arg, void * img2_void_arg, void * mask_void_arg, void * blend_void_arg)
{
  float * img2;
  img2 = (float *) (img2_void_arg);
  float * img1;
  img1 = (float *) (img1_void_arg);
  float * mask;
  mask = (float *) (mask_void_arg);
  float * blend;
  blend = (float *) (blend_void_arg);
  /* users : ['Dy_1_img2'] */
  float * _arr_24_1;
  _arr_24_1 = (float *) (pool_allocate((sizeof(float) * ((3 * ((R / 2) + -2)) * ((C / 2) + -2)))));
  #pragma omp parallel for schedule(static)
  for (int _T_i1 = 0; (_T_i1 <= 65); _T_i1 = (_T_i1 + 1))
  {
    /* users : ['Dx_1_img2'] */
    float _buf_3_0[((3 * 16) * 260)];
    for (int _T_i2 = -1; (_T_i2 <= 8); _T_i2 = (_T_i2 + 1))
    {
      for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        int _ct0 = ((1052 < ((16 * _T_i1) + 15))? 1052: ((16 * _T_i1) + 15));
        int _ct1 = ((1 > (16 * _T_i1))? 1: (16 * _T_i1));
        for (int _i1 = _ct1; (_i1 <= _ct0); _i1 = (_i1 + 1))
        {
          int _ct2 = ((2106 < ((256 * _T_i2) + 257))? 2106: ((256 * _T_i2) + 257));
          int _ct3 = ((0 > ((256 * _T_i2) + 2))? 0: ((256 * _T_i2) + 2));
          #pragma ivdep
          for (int _i2 = _ct3; (_i2 <= _ct2); _i2 = (_i2 + 1))
          {
            _buf_3_0[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + ((-256 * _T_i2) + _i2))] = (((((img2[(((_i0 * (R * C)) + ((-2 + (2 * _i1)) * C)) + _i2)] + (4 * img2[(((_i0 * (R * C)) + ((-1 + (2 * _i1)) * C)) + _i2)])) + (6 * img2[(((_i0 * (R * C)) + ((2 * _i1) * C)) + _i2)])) + (4 * img2[(((_i0 * (R * C)) + ((1 + (2 * _i1)) * C)) + _i2)])) + img2[(((_i0 * (R * C)) + ((2 + (2 * _i1)) * C)) + _i2)]) * 0.0625);
          }
        }
      }
      for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        int _ct4 = ((1052 < ((16 * _T_i1) + 15))? 1052: ((16 * _T_i1) + 15));
        int _ct5 = ((1 > (16 * _T_i1))? 1: (16 * _T_i1));
        for (int _i1 = _ct5; (_i1 <= _ct4); _i1 = (_i1 + 1))
        {
          int _ct6 = ((1052 < ((128 * _T_i2) + 129))? 1052: ((128 * _T_i2) + 129));
          int _ct7 = ((1 > (128 * _T_i2))? 1: (128 * _T_i2));
          #pragma ivdep
          for (int _i2 = _ct7; (_i2 <= _ct6); _i2 = (_i2 + 1))
          {
            _arr_24_1[(((_i0 * (((R / 2) + -2) * ((C / 2) + -2))) + ((_i1 - 1) * ((C / 2) + -2))) + (_i2 - 1))] = (((((_buf_3_0[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + (-2 + (2 * ((-128 * _T_i2) + _i2))))] + (4 * _buf_3_0[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + (-1 + (2 * ((-128 * _T_i2) + _i2))))])) + (6 * _buf_3_0[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + (2 * ((-128 * _T_i2) + _i2)))])) + (4 * _buf_3_0[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + (1 + (2 * ((-128 * _T_i2) + _i2))))])) + _buf_3_0[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + (2 + (2 * ((-128 * _T_i2) + _i2))))]) * 0.0625);
          }
        }
      }
    }
  }
  /* users : ['Dy_1_mask'] */
  float * _arr_25_3;
  _arr_25_3 = (float *) (pool_allocate((sizeof(float) * (((R / 2) + -2) * ((C / 2) + -2)))));
  #pragma omp parallel for schedule(static)
  for (int _T_i0 = 0; (_T_i0 <= 65); _T_i0 = (_T_i0 + 1))
  {
    /* users : ['Dx_1_mask'] */
    float _buf_4_2[(16 * 260)];
    for (int _T_i1 = -1; (_T_i1 <= 8); _T_i1 = (_T_i1 + 1))
    {
      int _ct8 = ((1052 < ((16 * _T_i0) + 15))? 1052: ((16 * _T_i0) + 15));
      int _ct9 = ((1 > (16 * _T_i0))? 1: (16 * _T_i0));
      for (int _i0 = _ct9; (_i0 <= _ct8); _i0 = (_i0 + 1))
      {
        int _ct10 = ((2106 < ((256 * _T_i1) + 257))? 2106: ((256 * _T_i1) + 257));
        int _ct11 = ((0 > ((256 * _T_i1) + 2))? 0: ((256 * _T_i1) + 2));
        #pragma ivdep
        for (int _i1 = _ct11; (_i1 <= _ct10); _i1 = (_i1 + 1))
        {
          _buf_4_2[((((-16 * _T_i0) + _i0) * 260) + ((-256 * _T_i1) + _i1))] = (((((mask[(((-2 + (2 * _i0)) * C) + _i1)] + (4 * mask[(((-1 + (2 * _i0)) * C) + _i1)])) + (6 * mask[(((2 * _i0) * C) + _i1)])) + (4 * mask[(((1 + (2 * _i0)) * C) + _i1)])) + mask[(((2 + (2 * _i0)) * C) + _i1)]) * 0.0625);
        }
      }
      int _ct12 = ((1052 < ((16 * _T_i0) + 15))? 1052: ((16 * _T_i0) + 15));
      int _ct13 = ((1 > (16 * _T_i0))? 1: (16 * _T_i0));
      for (int _i0 = _ct13; (_i0 <= _ct12); _i0 = (_i0 + 1))
      {
        int _ct14 = ((1052 < ((128 * _T_i1) + 129))? 1052: ((128 * _T_i1) + 129));
        int _ct15 = ((1 > (128 * _T_i1))? 1: (128 * _T_i1));
        #pragma ivdep
        for (int _i1 = _ct15; (_i1 <= _ct14); _i1 = (_i1 + 1))
        {
          _arr_25_3[(((_i0 - 1) * ((C / 2) + -2)) + (_i1 - 1))] = (((((_buf_4_2[((((-16 * _T_i0) + _i0) * 260) + (-2 + (2 * ((-128 * _T_i1) + _i1))))] + (4 * _buf_4_2[((((-16 * _T_i0) + _i0) * 260) + (-1 + (2 * ((-128 * _T_i1) + _i1))))])) + (6 * _buf_4_2[((((-16 * _T_i0) + _i0) * 260) + (2 * ((-128 * _T_i1) + _i1)))])) + (4 * _buf_4_2[((((-16 * _T_i0) + _i0) * 260) + (1 + (2 * ((-128 * _T_i1) + _i1))))])) + _buf_4_2[((((-16 * _T_i0) + _i0) * 260) + (2 + (2 * ((-128 * _T_i1) + _i1))))]) * 0.0625);
        }
      }
    }
  }
  /* users : ['Dy_1_img1'] */
  float * _arr_24_5;
  _arr_24_5 = (float *) (pool_allocate((sizeof(float) * ((3 * ((R / 2) + -2)) * ((C / 2) + -2)))));
  #pragma omp parallel for schedule(static)
  for (int _T_i1 = 0; (_T_i1 <= 65); _T_i1 = (_T_i1 + 1))
  {
    /* users : ['Dx_1_img1'] */
    float _buf_5_4[((3 * 16) * 260)];
    for (int _T_i2 = -1; (_T_i2 <= 8); _T_i2 = (_T_i2 + 1))
    {
      for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        int _ct16 = ((1052 < ((16 * _T_i1) + 15))? 1052: ((16 * _T_i1) + 15));
        int _ct17 = ((1 > (16 * _T_i1))? 1: (16 * _T_i1));
        for (int _i1 = _ct17; (_i1 <= _ct16); _i1 = (_i1 + 1))
        {
          int _ct18 = ((2106 < ((256 * _T_i2) + 257))? 2106: ((256 * _T_i2) + 257));
          int _ct19 = ((0 > ((256 * _T_i2) + 2))? 0: ((256 * _T_i2) + 2));
          #pragma ivdep
          for (int _i2 = _ct19; (_i2 <= _ct18); _i2 = (_i2 + 1))
          {
            _buf_5_4[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + ((-256 * _T_i2) + _i2))] = (((((img1[(((_i0 * (R * C)) + ((-2 + (2 * _i1)) * C)) + _i2)] + (4 * img1[(((_i0 * (R * C)) + ((-1 + (2 * _i1)) * C)) + _i2)])) + (6 * img1[(((_i0 * (R * C)) + ((2 * _i1) * C)) + _i2)])) + (4 * img1[(((_i0 * (R * C)) + ((1 + (2 * _i1)) * C)) + _i2)])) + img1[(((_i0 * (R * C)) + ((2 + (2 * _i1)) * C)) + _i2)]) * 0.0625);
          }
        }
      }
      for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        int _ct20 = ((1052 < ((16 * _T_i1) + 15))? 1052: ((16 * _T_i1) + 15));
        int _ct21 = ((1 > (16 * _T_i1))? 1: (16 * _T_i1));
        for (int _i1 = _ct21; (_i1 <= _ct20); _i1 = (_i1 + 1))
        {
          int _ct22 = ((1052 < ((128 * _T_i2) + 129))? 1052: ((128 * _T_i2) + 129));
          int _ct23 = ((1 > (128 * _T_i2))? 1: (128 * _T_i2));
          #pragma ivdep
          for (int _i2 = _ct23; (_i2 <= _ct22); _i2 = (_i2 + 1))
          {
            _arr_24_5[(((_i0 * (((R / 2) + -2) * ((C / 2) + -2))) + ((_i1 - 1) * ((C / 2) + -2))) + (_i2 - 1))] = (((((_buf_5_4[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + (-2 + (2 * ((-128 * _T_i2) + _i2))))] + (4 * _buf_5_4[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + (-1 + (2 * ((-128 * _T_i2) + _i2))))])) + (6 * _buf_5_4[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + (2 * ((-128 * _T_i2) + _i2)))])) + (4 * _buf_5_4[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + (1 + (2 * ((-128 * _T_i2) + _i2))))])) + _buf_5_4[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + (2 + (2 * ((-128 * _T_i2) + _i2))))]) * 0.0625);
          }
        }
      }
    }
  }
  /* users : ['Dy_2_img2'] */
  float * _arr_23_11;
  _arr_23_11 = (float *) (pool_allocate((sizeof(float) * ((3 * ((R / 4) + -3)) * ((C / 4) + -3)))));
  #pragma omp parallel for schedule(static)
  for (int _T_i1 = 0; (_T_i1 <= 32); _T_i1 = (_T_i1 + 1))
  {
    /* users : ['Dx_2_img2'] */
    float _buf_8_10[((3 * 16) * 260)];
    for (int _T_i2 = -1; (_T_i2 <= 4); _T_i2 = (_T_i2 + 1))
    {
      for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        int _ct24 = ((525 < ((16 * _T_i1) + 15))? 525: ((16 * _T_i1) + 15));
        int _ct25 = ((2 > (16 * _T_i1))? 2: (16 * _T_i1));
        for (int _i1 = _ct25; (_i1 <= _ct24); _i1 = (_i1 + 1))
        {
          int _ct26 = ((1052 < ((256 * _T_i2) + 257))? 1052: ((256 * _T_i2) + 257));
          int _ct27 = ((1 > ((256 * _T_i2) + 2))? 1: ((256 * _T_i2) + 2));
          #pragma ivdep
          for (int _i2 = _ct27; (_i2 <= _ct26); _i2 = (_i2 + 1))
          {
            _buf_8_10[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + ((-256 * _T_i2) + _i2))] = (((((_arr_24_1[(((_i0 * (((R / 2) + -2) * ((C / 2) + -2))) + ((-3 + (2 * _i1)) * ((C / 2) + -2))) + (-1 + _i2))] + (4 * _arr_24_1[(((_i0 * (((R / 2) + -2) * ((C / 2) + -2))) + ((-2 + (2 * _i1)) * ((C / 2) + -2))) + (-1 + _i2))])) + (6 * _arr_24_1[(((_i0 * (((R / 2) + -2) * ((C / 2) + -2))) + ((-1 + (2 * _i1)) * ((C / 2) + -2))) + (-1 + _i2))])) + (4 * _arr_24_1[(((_i0 * (((R / 2) + -2) * ((C / 2) + -2))) + ((2 * _i1) * ((C / 2) + -2))) + (-1 + _i2))])) + _arr_24_1[(((_i0 * (((R / 2) + -2) * ((C / 2) + -2))) + ((1 + (2 * _i1)) * ((C / 2) + -2))) + (-1 + _i2))]) * 0.0625);
          }
        }
      }
      for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        int _ct28 = ((525 < ((16 * _T_i1) + 15))? 525: ((16 * _T_i1) + 15));
        int _ct29 = ((2 > (16 * _T_i1))? 2: (16 * _T_i1));
        for (int _i1 = _ct29; (_i1 <= _ct28); _i1 = (_i1 + 1))
        {
          int _ct30 = ((525 < ((128 * _T_i2) + 129))? 525: ((128 * _T_i2) + 129));
          int _ct31 = ((2 > (128 * _T_i2))? 2: (128 * _T_i2));
          #pragma ivdep
          for (int _i2 = _ct31; (_i2 <= _ct30); _i2 = (_i2 + 1))
          {
            _arr_23_11[(((_i0 * (((R / 4) + -3) * ((C / 4) + -3))) + ((_i1 - 2) * ((C / 4) + -3))) + (_i2 - 2))] = (((((_buf_8_10[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + (-2 + (2 * ((-128 * _T_i2) + _i2))))] + (4 * _buf_8_10[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + (-1 + (2 * ((-128 * _T_i2) + _i2))))])) + (6 * _buf_8_10[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + (2 * ((-128 * _T_i2) + _i2)))])) + (4 * _buf_8_10[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + (1 + (2 * ((-128 * _T_i2) + _i2))))])) + _buf_8_10[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + (2 + (2 * ((-128 * _T_i2) + _i2))))]) * 0.0625);
          }
        }
      }
    }
  }
  /* users : ['Res_0'] */
  float * _arr_28_16;
  _arr_28_16 = (float *) (pool_allocate((sizeof(float) * ((3 * (-60 + R)) * (-60 + C)))));
  #pragma omp parallel for schedule(static)
  for (int _T_i1 = 1; (_T_i1 <= 129); _T_i1 = (_T_i1 + 1))
  {
    /* users : ['Ux_0_img1'] */
    float _buf_10_12[((3 * 16) * 130)];
    /* users : ['Ux_0_img2'] */
    float _buf_10_13[((3 * 16) * 130)];
    /* users : ['Uy_0_img1'] */
    float _buf_9_14[((3 * 16) * 260)];
    /* users : ['Uy_0_img2'] */
    float _buf_9_15[((3 * 16) * 260)];
    for (int _T_i2 = 0; (_T_i2 <= 8); _T_i2 = (_T_i2 + 1))
    {
      int _ct32 = ((0 > ((-8 * _T_i1) + 9))? 0: ((-8 * _T_i1) + 9));
      for (int _o = _ct32; (_o <= 1); _o = (_o + 1))
      {
        for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
        {
          int _ct33 = (((((16 * _T_i1) + _o) + 14) < (-(_o) + 2078))? (((16 * _T_i1) + _o) + 14): (-(_o) + 2078));
          int _ct34 = ((((16 * _T_i1) + _o) > (-(_o) + 32))? ((16 * _T_i1) + _o): (-(_o) + 32));
          for (int _i1 = _ct34; (_i1 <= _ct33); _i1 = (_i1 + 2))
          {
            int _ct35 = ((1040 < ((128 * _T_i2) + 129))? 1040: ((128 * _T_i2) + 129));
            int _ct36 = ((15 > ((128 * _T_i2) + 1))? 15: ((128 * _T_i2) + 1));
            #pragma ivdep
            for (int _i2 = _ct36; (_i2 <= _ct35); _i2 = (_i2 + 1))
            {
              _buf_10_12[(((_i0 * (16 * 130)) + (((-16 * _T_i1) + _i1) * 130)) + ((-128 * _T_i2) + _i2))] = (((4 * _arr_24_5[(((_i0 * (((R / 2) + -2) * ((C / 2) + -2))) + ((((_i1 - 1) / 2) - 1) * ((C / 2) + -2))) + (-1 + _i2))]) + (4 * _arr_24_5[(((_i0 * (((R / 2) + -2) * ((C / 2) + -2))) + ((((_i1 + 1) / 2) - 1) * ((C / 2) + -2))) + (-1 + _i2))])) * 0.125);
            }
          }
        }
      }
      int _ct37 = ((2 > ((-8 * _T_i1) + 11))? 2: ((-8 * _T_i1) + 11));
      for (int _o = _ct37; (_o <= 3); _o = (_o + 1))
      {
        for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
        {
          int _ct38 = (((((16 * _T_i1) + _o) + 12) < (-(_o) + 2080))? (((16 * _T_i1) + _o) + 12): (-(_o) + 2080));
          int _ct39 = (((((16 * _T_i1) + _o) - 2) > (-(_o) + 34))? (((16 * _T_i1) + _o) - 2): (-(_o) + 34));
          for (int _i1 = _ct39; (_i1 <= _ct38); _i1 = (_i1 + 2))
          {
            int _ct40 = ((1040 < ((128 * _T_i2) + 129))? 1040: ((128 * _T_i2) + 129));
            int _ct41 = ((15 > ((128 * _T_i2) + 1))? 15: ((128 * _T_i2) + 1));
            #pragma ivdep
            for (int _i2 = _ct41; (_i2 <= _ct40); _i2 = (_i2 + 1))
            {
              _buf_10_13[(((_i0 * (16 * 130)) + (((-16 * _T_i1) + _i1) * 130)) + ((-128 * _T_i2) + _i2))] = (((4 * _arr_24_1[(((_i0 * (((R / 2) + -2) * ((C / 2) + -2))) + ((((_i1 - 1) / 2) - 1) * ((C / 2) + -2))) + (-1 + _i2))]) + (4 * _arr_24_1[(((_i0 * (((R / 2) + -2) * ((C / 2) + -2))) + ((((_i1 + 1) / 2) - 1) * ((C / 2) + -2))) + (-1 + _i2))])) * 0.125);
            }
          }
        }
      }
      for (int _o = 4; (_o <= 5); _o = (_o + 1))
      {
        for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
        {
          int _ct42 = ((2078 < ((16 * _T_i1) + 15))? 2078: ((16 * _T_i1) + 15));
          int _ct43 = ((31 > (16 * _T_i1))? 31: (16 * _T_i1));
          for (int _i1 = _ct43; (_i1 <= _ct42); _i1 = (_i1 + 1))
          {
            int _ct44 = (((((256 * _T_i2) + _o) + 254) < (-(_o) + 2082))? (((256 * _T_i2) + _o) + 254): (-(_o) + 2082));
            int _ct45 = (((((256 * _T_i2) + _o) - 4) > (-(_o) + 36))? (((256 * _T_i2) + _o) - 4): (-(_o) + 36));
            #pragma ivdep
            for (int _i2 = _ct45; (_i2 <= _ct44); _i2 = (_i2 + 2))
            {
              _buf_9_14[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + ((-256 * _T_i2) + _i2))] = (img1[(((_i0 * (R * C)) + (_i1 * C)) + _i2)] - (((4 * _buf_10_12[(((_i0 * (16 * 130)) + (((-16 * _T_i1) + _i1) * 130)) + ((-1 + ((-256 * _T_i2) + _i2)) / 2))]) + (4 * _buf_10_12[(((_i0 * (16 * 130)) + (((-16 * _T_i1) + _i1) * 130)) + ((1 + ((-256 * _T_i2) + _i2)) / 2))])) * 0.125));
            }
          }
        }
      }
      for (int _o = 6; (_o <= 7); _o = (_o + 1))
      {
        for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
        {
          int _ct46 = ((2078 < ((16 * _T_i1) + 15))? 2078: ((16 * _T_i1) + 15));
          int _ct47 = ((31 > (16 * _T_i1))? 31: (16 * _T_i1));
          for (int _i1 = _ct47; (_i1 <= _ct46); _i1 = (_i1 + 1))
          {
            int _ct48 = (((((256 * _T_i2) + _o) + 252) < (-(_o) + 2084))? (((256 * _T_i2) + _o) + 252): (-(_o) + 2084));
            int _ct49 = (((((256 * _T_i2) + _o) - 6) > (-(_o) + 38))? (((256 * _T_i2) + _o) - 6): (-(_o) + 38));
            #pragma ivdep
            for (int _i2 = _ct49; (_i2 <= _ct48); _i2 = (_i2 + 2))
            {
              _buf_9_15[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + ((-256 * _T_i2) + _i2))] = (img2[(((_i0 * (R * C)) + (_i1 * C)) + _i2)] - (((4 * _buf_10_13[(((_i0 * (16 * 130)) + (((-16 * _T_i1) + _i1) * 130)) + ((-1 + ((-256 * _T_i2) + _i2)) / 2))]) + (4 * _buf_10_13[(((_i0 * (16 * 130)) + (((-16 * _T_i1) + _i1) * 130)) + ((1 + ((-256 * _T_i2) + _i2)) / 2))])) * 0.125));
            }
          }
        }
      }
      for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        int _ct50 = ((2078 < ((16 * _T_i1) + 15))? 2078: ((16 * _T_i1) + 15));
        int _ct51 = ((31 > (16 * _T_i1))? 31: (16 * _T_i1));
        for (int _i1 = _ct51; (_i1 <= _ct50); _i1 = (_i1 + 1))
        {
          int _ct52 = ((2078 < ((256 * _T_i2) + 258))? 2078: ((256 * _T_i2) + 258));
          int _ct53 = ((31 > ((256 * _T_i2) + 1))? 31: ((256 * _T_i2) + 1));
          #pragma ivdep
          for (int _i2 = _ct53; (_i2 <= _ct52); _i2 = (_i2 + 1))
          {
            _arr_28_16[(((_i0 * ((-60 + R) * (-60 + C))) + ((_i1 - 31) * (-60 + C))) + (_i2 - 31))] = ((_buf_9_14[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + ((-256 * _T_i2) + _i2))] * mask[((_i1 * C) + _i2)]) + (_buf_9_15[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + ((-256 * _T_i2) + _i2))] * (1 - mask[((_i1 * C) + _i2)])));
          }
        }
      }
    }
  }
  /* users : ['Dy_2_mask'] */
  float * _arr_26_7;
  _arr_26_7 = (float *) (pool_allocate((sizeof(float) * (((R / 4) + -3) * ((C / 4) + -3)))));
  #pragma omp parallel for schedule(static)
  for (int _T_i0 = 0; (_T_i0 <= 32); _T_i0 = (_T_i0 + 1))
  {
    /* users : ['Dx_2_mask'] */
    float _buf_6_6[(16 * 260)];
    for (int _T_i1 = -1; (_T_i1 <= 4); _T_i1 = (_T_i1 + 1))
    {
      int _ct54 = ((525 < ((16 * _T_i0) + 15))? 525: ((16 * _T_i0) + 15));
      int _ct55 = ((2 > (16 * _T_i0))? 2: (16 * _T_i0));
      for (int _i0 = _ct55; (_i0 <= _ct54); _i0 = (_i0 + 1))
      {
        int _ct56 = ((1052 < ((256 * _T_i1) + 257))? 1052: ((256 * _T_i1) + 257));
        int _ct57 = ((1 > ((256 * _T_i1) + 2))? 1: ((256 * _T_i1) + 2));
        #pragma ivdep
        for (int _i1 = _ct57; (_i1 <= _ct56); _i1 = (_i1 + 1))
        {
          _buf_6_6[((((-16 * _T_i0) + _i0) * 260) + ((-256 * _T_i1) + _i1))] = (((((_arr_25_3[(((-3 + (2 * _i0)) * ((C / 2) + -2)) + (-1 + _i1))] + (4 * _arr_25_3[(((-2 + (2 * _i0)) * ((C / 2) + -2)) + (-1 + _i1))])) + (6 * _arr_25_3[(((-1 + (2 * _i0)) * ((C / 2) + -2)) + (-1 + _i1))])) + (4 * _arr_25_3[(((2 * _i0) * ((C / 2) + -2)) + (-1 + _i1))])) + _arr_25_3[(((1 + (2 * _i0)) * ((C / 2) + -2)) + (-1 + _i1))]) * 0.0625);
        }
      }
      int _ct58 = ((525 < ((16 * _T_i0) + 15))? 525: ((16 * _T_i0) + 15));
      int _ct59 = ((2 > (16 * _T_i0))? 2: (16 * _T_i0));
      for (int _i0 = _ct59; (_i0 <= _ct58); _i0 = (_i0 + 1))
      {
        int _ct60 = ((525 < ((128 * _T_i1) + 129))? 525: ((128 * _T_i1) + 129));
        int _ct61 = ((2 > (128 * _T_i1))? 2: (128 * _T_i1));
        #pragma ivdep
        for (int _i1 = _ct61; (_i1 <= _ct60); _i1 = (_i1 + 1))
        {
          _arr_26_7[(((_i0 - 2) * ((C / 4) + -3)) + (_i1 - 2))] = (((((_buf_6_6[((((-16 * _T_i0) + _i0) * 260) + (-2 + (2 * ((-128 * _T_i1) + _i1))))] + (4 * _buf_6_6[((((-16 * _T_i0) + _i0) * 260) + (-1 + (2 * ((-128 * _T_i1) + _i1))))])) + (6 * _buf_6_6[((((-16 * _T_i0) + _i0) * 260) + (2 * ((-128 * _T_i1) + _i1)))])) + (4 * _buf_6_6[((((-16 * _T_i0) + _i0) * 260) + (1 + (2 * ((-128 * _T_i1) + _i1))))])) + _buf_6_6[((((-16 * _T_i0) + _i0) * 260) + (2 + (2 * ((-128 * _T_i1) + _i1))))]) * 0.0625);
        }
      }
    }
  }
  /* users : ['Dy_2_img1'] */
  float * _arr_23_9;
  _arr_23_9 = (float *) (pool_allocate((sizeof(float) * ((3 * ((R / 4) + -3)) * ((C / 4) + -3)))));
  #pragma omp parallel for schedule(static)
  for (int _T_i1 = 0; (_T_i1 <= 32); _T_i1 = (_T_i1 + 1))
  {
    /* users : ['Dx_2_img1'] */
    float _buf_7_8[((3 * 16) * 260)];
    for (int _T_i2 = -1; (_T_i2 <= 4); _T_i2 = (_T_i2 + 1))
    {
      for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        int _ct62 = ((525 < ((16 * _T_i1) + 15))? 525: ((16 * _T_i1) + 15));
        int _ct63 = ((2 > (16 * _T_i1))? 2: (16 * _T_i1));
        for (int _i1 = _ct63; (_i1 <= _ct62); _i1 = (_i1 + 1))
        {
          int _ct64 = ((1052 < ((256 * _T_i2) + 257))? 1052: ((256 * _T_i2) + 257));
          int _ct65 = ((1 > ((256 * _T_i2) + 2))? 1: ((256 * _T_i2) + 2));
          #pragma ivdep
          for (int _i2 = _ct65; (_i2 <= _ct64); _i2 = (_i2 + 1))
          {
            _buf_7_8[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + ((-256 * _T_i2) + _i2))] = (((((_arr_24_5[(((_i0 * (((R / 2) + -2) * ((C / 2) + -2))) + ((-3 + (2 * _i1)) * ((C / 2) + -2))) + (-1 + _i2))] + (4 * _arr_24_5[(((_i0 * (((R / 2) + -2) * ((C / 2) + -2))) + ((-2 + (2 * _i1)) * ((C / 2) + -2))) + (-1 + _i2))])) + (6 * _arr_24_5[(((_i0 * (((R / 2) + -2) * ((C / 2) + -2))) + ((-1 + (2 * _i1)) * ((C / 2) + -2))) + (-1 + _i2))])) + (4 * _arr_24_5[(((_i0 * (((R / 2) + -2) * ((C / 2) + -2))) + ((2 * _i1) * ((C / 2) + -2))) + (-1 + _i2))])) + _arr_24_5[(((_i0 * (((R / 2) + -2) * ((C / 2) + -2))) + ((1 + (2 * _i1)) * ((C / 2) + -2))) + (-1 + _i2))]) * 0.0625);
          }
        }
      }
      for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        int _ct66 = ((525 < ((16 * _T_i1) + 15))? 525: ((16 * _T_i1) + 15));
        int _ct67 = ((2 > (16 * _T_i1))? 2: (16 * _T_i1));
        for (int _i1 = _ct67; (_i1 <= _ct66); _i1 = (_i1 + 1))
        {
          int _ct68 = ((525 < ((128 * _T_i2) + 129))? 525: ((128 * _T_i2) + 129));
          int _ct69 = ((2 > (128 * _T_i2))? 2: (128 * _T_i2));
          #pragma ivdep
          for (int _i2 = _ct69; (_i2 <= _ct68); _i2 = (_i2 + 1))
          {
            _arr_23_9[(((_i0 * (((R / 4) + -3) * ((C / 4) + -3))) + ((_i1 - 2) * ((C / 4) + -3))) + (_i2 - 2))] = (((((_buf_7_8[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + (-2 + (2 * ((-128 * _T_i2) + _i2))))] + (4 * _buf_7_8[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + (-1 + (2 * ((-128 * _T_i2) + _i2))))])) + (6 * _buf_7_8[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + (2 * ((-128 * _T_i2) + _i2)))])) + (4 * _buf_7_8[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + (1 + (2 * ((-128 * _T_i2) + _i2))))])) + _buf_7_8[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + (2 + (2 * ((-128 * _T_i2) + _i2))))]) * 0.0625);
          }
        }
      }
    }
  }
  /* users : ['Dy_3_img2'] */
  float * _arr_29_22;
  _arr_29_22 = (float *) (pool_allocate((sizeof(float) * ((3 * ((R / 8) + -4)) * ((C / 8) + -4)))));
  #pragma omp parallel for schedule(static)
  for (int _T_i1 = 0; (_T_i1 <= 16); _T_i1 = (_T_i1 + 1))
  {
    /* users : ['Dx_3_img2'] */
    float _buf_13_21[((3 * 16) * 260)];
    for (int _T_i2 = 0; (_T_i2 <= 2); _T_i2 = (_T_i2 + 1))
    {
      for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        int _ct70 = ((261 < ((16 * _T_i1) + 15))? 261: ((16 * _T_i1) + 15));
        int _ct71 = ((3 > (16 * _T_i1))? 3: (16 * _T_i1));
        for (int _i1 = _ct71; (_i1 <= _ct70); _i1 = (_i1 + 1))
        {
          int _ct72 = ((525 < ((256 * _T_i2) + 257))? 525: ((256 * _T_i2) + 257));
          #pragma ivdep
          for (int _i2 = ((256 * _T_i2) + 2); (_i2 <= _ct72); _i2 = (_i2 + 1))
          {
            _buf_13_21[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + ((-256 * _T_i2) + _i2))] = (((((_arr_23_11[(((_i0 * (((R / 4) + -3) * ((C / 4) + -3))) + ((-4 + (2 * _i1)) * ((C / 4) + -3))) + (-2 + _i2))] + (4 * _arr_23_11[(((_i0 * (((R / 4) + -3) * ((C / 4) + -3))) + ((-3 + (2 * _i1)) * ((C / 4) + -3))) + (-2 + _i2))])) + (6 * _arr_23_11[(((_i0 * (((R / 4) + -3) * ((C / 4) + -3))) + ((-2 + (2 * _i1)) * ((C / 4) + -3))) + (-2 + _i2))])) + (4 * _arr_23_11[(((_i0 * (((R / 4) + -3) * ((C / 4) + -3))) + ((-1 + (2 * _i1)) * ((C / 4) + -3))) + (-2 + _i2))])) + _arr_23_11[(((_i0 * (((R / 4) + -3) * ((C / 4) + -3))) + ((2 * _i1) * ((C / 4) + -3))) + (-2 + _i2))]) * 0.0625);
          }
        }
      }
      for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        int _ct73 = ((261 < ((16 * _T_i1) + 15))? 261: ((16 * _T_i1) + 15));
        int _ct74 = ((3 > (16 * _T_i1))? 3: (16 * _T_i1));
        for (int _i1 = _ct74; (_i1 <= _ct73); _i1 = (_i1 + 1))
        {
          int _ct75 = ((261 < ((128 * _T_i2) + 129))? 261: ((128 * _T_i2) + 129));
          int _ct76 = ((3 > (128 * _T_i2))? 3: (128 * _T_i2));
          #pragma ivdep
          for (int _i2 = _ct76; (_i2 <= _ct75); _i2 = (_i2 + 1))
          {
            _arr_29_22[(((_i0 * (((R / 8) + -4) * ((C / 8) + -4))) + ((_i1 - 3) * ((C / 8) + -4))) + (_i2 - 3))] = (((((_buf_13_21[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + (-2 + (2 * ((-128 * _T_i2) + _i2))))] + (4 * _buf_13_21[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + (-1 + (2 * ((-128 * _T_i2) + _i2))))])) + (6 * _buf_13_21[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + (2 * ((-128 * _T_i2) + _i2)))])) + (4 * _buf_13_21[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + (1 + (2 * ((-128 * _T_i2) + _i2))))])) + _buf_13_21[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + (2 + (2 * ((-128 * _T_i2) + _i2))))]) * 0.0625);
          }
        }
      }
    }
  }
  /* users : ['Res_1'] */
  float * _arr_24_27;
  _arr_24_27 = (float *) (pool_allocate((sizeof(float) * ((3 * ((R / 2) + -2)) * ((C / 2) + -2)))));
  #pragma omp parallel for schedule(static)
  for (int _T_i1 = 0; (_T_i1 <= 65); _T_i1 = (_T_i1 + 1))
  {
    /* users : ['Ux_1_img2'] */
    float _buf_15_23[((3 * 16) * 130)];
    /* users : ['Ux_1_img1'] */
    float _buf_15_24[((3 * 16) * 130)];
    /* users : ['Uy_1_img2'] */
    float _buf_14_25[((3 * 16) * 260)];
    /* users : ['Uy_1_img1'] */
    float _buf_14_26[((3 * 16) * 260)];
    for (int _T_i2 = 0; (_T_i2 <= 4); _T_i2 = (_T_i2 + 1))
    {
      int _ct77 = ((1 < ((-8 * _T_i1) + 520))? 1: ((-8 * _T_i1) + 520));
      int _ct78 = ((0 > ((-8 * _T_i1) + 1))? 0: ((-8 * _T_i1) + 1));
      for (int _o = _ct78; (_o <= _ct77); _o = (_o + 1))
      {
        for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
        {
          int _ct79 = (((((16 * _T_i1) + _o) + 14) < (-(_o) + 1040))? (((16 * _T_i1) + _o) + 14): (-(_o) + 1040));
          int _ct80 = ((((16 * _T_i1) + _o) > (-(_o) + 16))? ((16 * _T_i1) + _o): (-(_o) + 16));
          for (int _i1 = _ct80; (_i1 <= _ct79); _i1 = (_i1 + 2))
          {
            int _ct81 = ((521 < ((128 * _T_i2) + 129))? 521: ((128 * _T_i2) + 129));
            int _ct82 = ((7 > ((128 * _T_i2) + 1))? 7: ((128 * _T_i2) + 1));
            #pragma ivdep
            for (int _i2 = _ct82; (_i2 <= _ct81); _i2 = (_i2 + 1))
            {
              _buf_15_23[(((_i0 * (16 * 130)) + (((-16 * _T_i1) + _i1) * 130)) + ((-128 * _T_i2) + _i2))] = (((4 * _arr_23_11[(((_i0 * (((R / 4) + -3) * ((C / 4) + -3))) + ((((_i1 - 1) / 2) - 2) * ((C / 4) + -3))) + (-2 + _i2))]) + (4 * _arr_23_11[(((_i0 * (((R / 4) + -3) * ((C / 4) + -3))) + ((((_i1 + 1) / 2) - 2) * ((C / 4) + -3))) + (-2 + _i2))])) * 0.125);
            }
          }
        }
      }
      int _ct83 = ((3 < ((-8 * _T_i1) + 522))? 3: ((-8 * _T_i1) + 522));
      int _ct84 = ((2 > ((-8 * _T_i1) + 3))? 2: ((-8 * _T_i1) + 3));
      for (int _o = _ct84; (_o <= _ct83); _o = (_o + 1))
      {
        for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
        {
          int _ct85 = (((((16 * _T_i1) + _o) + 12) < (-(_o) + 1042))? (((16 * _T_i1) + _o) + 12): (-(_o) + 1042));
          int _ct86 = (((((16 * _T_i1) + _o) - 2) > (-(_o) + 18))? (((16 * _T_i1) + _o) - 2): (-(_o) + 18));
          for (int _i1 = _ct86; (_i1 <= _ct85); _i1 = (_i1 + 2))
          {
            int _ct87 = ((521 < ((128 * _T_i2) + 129))? 521: ((128 * _T_i2) + 129));
            int _ct88 = ((7 > ((128 * _T_i2) + 1))? 7: ((128 * _T_i2) + 1));
            #pragma ivdep
            for (int _i2 = _ct88; (_i2 <= _ct87); _i2 = (_i2 + 1))
            {
              _buf_15_24[(((_i0 * (16 * 130)) + (((-16 * _T_i1) + _i1) * 130)) + ((-128 * _T_i2) + _i2))] = (((4 * _arr_23_9[(((_i0 * (((R / 4) + -3) * ((C / 4) + -3))) + ((((_i1 - 1) / 2) - 2) * ((C / 4) + -3))) + (-2 + _i2))]) + (4 * _arr_23_9[(((_i0 * (((R / 4) + -3) * ((C / 4) + -3))) + ((((_i1 + 1) / 2) - 2) * ((C / 4) + -3))) + (-2 + _i2))])) * 0.125);
            }
          }
        }
      }
      for (int _o = 4; (_o <= 5); _o = (_o + 1))
      {
        for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
        {
          int _ct89 = ((1040 < ((16 * _T_i1) + 15))? 1040: ((16 * _T_i1) + 15));
          int _ct90 = ((15 > (16 * _T_i1))? 15: (16 * _T_i1));
          for (int _i1 = _ct90; (_i1 <= _ct89); _i1 = (_i1 + 1))
          {
            int _ct91 = (((((256 * _T_i2) + _o) + 254) < (-(_o) + 1044))? (((256 * _T_i2) + _o) + 254): (-(_o) + 1044));
            int _ct92 = (((((256 * _T_i2) + _o) - 4) > (-(_o) + 20))? (((256 * _T_i2) + _o) - 4): (-(_o) + 20));
            #pragma ivdep
            for (int _i2 = _ct92; (_i2 <= _ct91); _i2 = (_i2 + 2))
            {
              _buf_14_25[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + ((-256 * _T_i2) + _i2))] = (_arr_24_1[(((_i0 * (((R / 2) + -2) * ((C / 2) + -2))) + ((-1 + _i1) * ((C / 2) + -2))) + (-1 + _i2))] - (((4 * _buf_15_23[(((_i0 * (16 * 130)) + (((-16 * _T_i1) + _i1) * 130)) + ((-1 + ((-256 * _T_i2) + _i2)) / 2))]) + (4 * _buf_15_23[(((_i0 * (16 * 130)) + (((-16 * _T_i1) + _i1) * 130)) + ((1 + ((-256 * _T_i2) + _i2)) / 2))])) * 0.125));
            }
          }
        }
      }
      for (int _o = 6; (_o <= 7); _o = (_o + 1))
      {
        for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
        {
          int _ct93 = ((1040 < ((16 * _T_i1) + 15))? 1040: ((16 * _T_i1) + 15));
          int _ct94 = ((15 > (16 * _T_i1))? 15: (16 * _T_i1));
          for (int _i1 = _ct94; (_i1 <= _ct93); _i1 = (_i1 + 1))
          {
            int _ct95 = (((((256 * _T_i2) + _o) + 252) < (-(_o) + 1046))? (((256 * _T_i2) + _o) + 252): (-(_o) + 1046));
            int _ct96 = (((((256 * _T_i2) + _o) - 6) > (-(_o) + 22))? (((256 * _T_i2) + _o) - 6): (-(_o) + 22));
            #pragma ivdep
            for (int _i2 = _ct96; (_i2 <= _ct95); _i2 = (_i2 + 2))
            {
              _buf_14_26[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + ((-256 * _T_i2) + _i2))] = (_arr_24_5[(((_i0 * (((R / 2) + -2) * ((C / 2) + -2))) + ((-1 + _i1) * ((C / 2) + -2))) + (-1 + _i2))] - (((4 * _buf_15_24[(((_i0 * (16 * 130)) + (((-16 * _T_i1) + _i1) * 130)) + ((-1 + ((-256 * _T_i2) + _i2)) / 2))]) + (4 * _buf_15_24[(((_i0 * (16 * 130)) + (((-16 * _T_i1) + _i1) * 130)) + ((1 + ((-256 * _T_i2) + _i2)) / 2))])) * 0.125));
            }
          }
        }
      }
      for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        int _ct97 = ((1040 < ((16 * _T_i1) + 15))? 1040: ((16 * _T_i1) + 15));
        int _ct98 = ((15 > (16 * _T_i1))? 15: (16 * _T_i1));
        for (int _i1 = _ct98; (_i1 <= _ct97); _i1 = (_i1 + 1))
        {
          int _ct99 = ((1040 < ((256 * _T_i2) + 258))? 1040: ((256 * _T_i2) + 258));
          int _ct100 = ((15 > ((256 * _T_i2) + 1))? 15: ((256 * _T_i2) + 1));
          #pragma ivdep
          for (int _i2 = _ct100; (_i2 <= _ct99); _i2 = (_i2 + 1))
          {
            _arr_24_27[(((_i0 * (((R / 2) + -2) * ((C / 2) + -2))) + ((_i1 - 15) * ((C / 2) + -2))) + (_i2 - 15))] = ((_buf_14_26[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + ((-256 * _T_i2) + _i2))] * _arr_25_3[(((-1 + _i1) * ((C / 2) + -2)) + (-1 + _i2))]) + (_buf_14_25[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + ((-256 * _T_i2) + _i2))] * (1 - _arr_25_3[(((-1 + _i1) * ((C / 2) + -2)) + (-1 + _i2))])));
          }
        }
      }
    }
  }
  pool_deallocate(_arr_25_3);
  pool_deallocate(_arr_24_5);
  pool_deallocate(_arr_24_1);
  /* users : ['Dy_3_mask'] */
  float * _arr_27_18;
  _arr_27_18 = (float *) (pool_allocate((sizeof(float) * (((R / 8) + -4) * ((C / 8) + -4)))));
  #pragma omp parallel for schedule(static)
  for (int _T_i0 = 0; (_T_i0 <= 16); _T_i0 = (_T_i0 + 1))
  {
    /* users : ['Dx_3_mask'] */
    float _buf_11_17[(16 * 260)];
    for (int _T_i1 = 0; (_T_i1 <= 2); _T_i1 = (_T_i1 + 1))
    {
      int _ct101 = ((261 < ((16 * _T_i0) + 15))? 261: ((16 * _T_i0) + 15));
      int _ct102 = ((3 > (16 * _T_i0))? 3: (16 * _T_i0));
      for (int _i0 = _ct102; (_i0 <= _ct101); _i0 = (_i0 + 1))
      {
        int _ct103 = ((525 < ((256 * _T_i1) + 257))? 525: ((256 * _T_i1) + 257));
        #pragma ivdep
        for (int _i1 = ((256 * _T_i1) + 2); (_i1 <= _ct103); _i1 = (_i1 + 1))
        {
          _buf_11_17[((((-16 * _T_i0) + _i0) * 260) + ((-256 * _T_i1) + _i1))] = (((((_arr_26_7[(((-4 + (2 * _i0)) * ((C / 4) + -3)) + (-2 + _i1))] + (4 * _arr_26_7[(((-3 + (2 * _i0)) * ((C / 4) + -3)) + (-2 + _i1))])) + (6 * _arr_26_7[(((-2 + (2 * _i0)) * ((C / 4) + -3)) + (-2 + _i1))])) + (4 * _arr_26_7[(((-1 + (2 * _i0)) * ((C / 4) + -3)) + (-2 + _i1))])) + _arr_26_7[(((2 * _i0) * ((C / 4) + -3)) + (-2 + _i1))]) * 0.0625);
        }
      }
      int _ct104 = ((261 < ((16 * _T_i0) + 15))? 261: ((16 * _T_i0) + 15));
      int _ct105 = ((3 > (16 * _T_i0))? 3: (16 * _T_i0));
      for (int _i0 = _ct105; (_i0 <= _ct104); _i0 = (_i0 + 1))
      {
        int _ct106 = ((261 < ((128 * _T_i1) + 129))? 261: ((128 * _T_i1) + 129));
        int _ct107 = ((3 > (128 * _T_i1))? 3: (128 * _T_i1));
        #pragma ivdep
        for (int _i1 = _ct107; (_i1 <= _ct106); _i1 = (_i1 + 1))
        {
          _arr_27_18[(((_i0 - 3) * ((C / 8) + -4)) + (_i1 - 3))] = (((((_buf_11_17[((((-16 * _T_i0) + _i0) * 260) + (-2 + (2 * ((-128 * _T_i1) + _i1))))] + (4 * _buf_11_17[((((-16 * _T_i0) + _i0) * 260) + (-1 + (2 * ((-128 * _T_i1) + _i1))))])) + (6 * _buf_11_17[((((-16 * _T_i0) + _i0) * 260) + (2 * ((-128 * _T_i1) + _i1)))])) + (4 * _buf_11_17[((((-16 * _T_i0) + _i0) * 260) + (1 + (2 * ((-128 * _T_i1) + _i1))))])) + _buf_11_17[((((-16 * _T_i0) + _i0) * 260) + (2 + (2 * ((-128 * _T_i1) + _i1))))]) * 0.0625);
        }
      }
    }
  }
  /* users : ['Dy_3_img1'] */
  float * _arr_29_20;
  _arr_29_20 = (float *) (pool_allocate((sizeof(float) * ((3 * ((R / 8) + -4)) * ((C / 8) + -4)))));
  #pragma omp parallel for schedule(static)
  for (int _T_i1 = 0; (_T_i1 <= 16); _T_i1 = (_T_i1 + 1))
  {
    /* users : ['Dx_3_img1'] */
    float _buf_12_19[((3 * 16) * 260)];
    for (int _T_i2 = 0; (_T_i2 <= 2); _T_i2 = (_T_i2 + 1))
    {
      for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        int _ct108 = ((261 < ((16 * _T_i1) + 15))? 261: ((16 * _T_i1) + 15));
        int _ct109 = ((3 > (16 * _T_i1))? 3: (16 * _T_i1));
        for (int _i1 = _ct109; (_i1 <= _ct108); _i1 = (_i1 + 1))
        {
          int _ct110 = ((525 < ((256 * _T_i2) + 257))? 525: ((256 * _T_i2) + 257));
          #pragma ivdep
          for (int _i2 = ((256 * _T_i2) + 2); (_i2 <= _ct110); _i2 = (_i2 + 1))
          {
            _buf_12_19[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + ((-256 * _T_i2) + _i2))] = (((((_arr_23_9[(((_i0 * (((R / 4) + -3) * ((C / 4) + -3))) + ((-4 + (2 * _i1)) * ((C / 4) + -3))) + (-2 + _i2))] + (4 * _arr_23_9[(((_i0 * (((R / 4) + -3) * ((C / 4) + -3))) + ((-3 + (2 * _i1)) * ((C / 4) + -3))) + (-2 + _i2))])) + (6 * _arr_23_9[(((_i0 * (((R / 4) + -3) * ((C / 4) + -3))) + ((-2 + (2 * _i1)) * ((C / 4) + -3))) + (-2 + _i2))])) + (4 * _arr_23_9[(((_i0 * (((R / 4) + -3) * ((C / 4) + -3))) + ((-1 + (2 * _i1)) * ((C / 4) + -3))) + (-2 + _i2))])) + _arr_23_9[(((_i0 * (((R / 4) + -3) * ((C / 4) + -3))) + ((2 * _i1) * ((C / 4) + -3))) + (-2 + _i2))]) * 0.0625);
          }
        }
      }
      for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        int _ct111 = ((261 < ((16 * _T_i1) + 15))? 261: ((16 * _T_i1) + 15));
        int _ct112 = ((3 > (16 * _T_i1))? 3: (16 * _T_i1));
        for (int _i1 = _ct112; (_i1 <= _ct111); _i1 = (_i1 + 1))
        {
          int _ct113 = ((261 < ((128 * _T_i2) + 129))? 261: ((128 * _T_i2) + 129));
          int _ct114 = ((3 > (128 * _T_i2))? 3: (128 * _T_i2));
          #pragma ivdep
          for (int _i2 = _ct114; (_i2 <= _ct113); _i2 = (_i2 + 1))
          {
            _arr_29_20[(((_i0 * (((R / 8) + -4) * ((C / 8) + -4))) + ((_i1 - 3) * ((C / 8) + -4))) + (_i2 - 3))] = (((((_buf_12_19[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + (-2 + (2 * ((-128 * _T_i2) + _i2))))] + (4 * _buf_12_19[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + (-1 + (2 * ((-128 * _T_i2) + _i2))))])) + (6 * _buf_12_19[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + (2 * ((-128 * _T_i2) + _i2)))])) + (4 * _buf_12_19[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + (1 + (2 * ((-128 * _T_i2) + _i2))))])) + _buf_12_19[(((_i0 * (16 * 260)) + (((-16 * _T_i1) + _i1) * 260)) + (2 + (2 * ((-128 * _T_i2) + _i2))))]) * 0.0625);
          }
        }
      }
    }
  }
  /* users : ['Ux_2_img2'] */
  float * _arr_30_28;
  _arr_30_28 = (float *) (pool_allocate((sizeof(float) * ((3 * ((R / 4) + -12)) * ((C / 8) + -4)))));
  for (int _o = 0; (_o <= 1); _o = (_o + 1))
  {
    for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
    {
      #pragma omp parallel for schedule(static)
      for (int _i1 = (-(_o) + 8); (_i1 <= (_o + 520)); _i1 = (_i1 + 2))
      {
        #pragma ivdep
        for (int _i2 = 3; (_i2 <= 261); _i2 = (_i2 + 1))
        {
          _arr_30_28[(((_i0 * (((R / 4) + -12) * ((C / 8) + -4))) + ((_i1 - 7) * ((C / 8) + -4))) + (_i2 - 3))] = (((4 * _arr_29_22[(((_i0 * (((R / 8) + -4) * ((C / 8) + -4))) + ((((_i1 - 1) / 2) - 3) * ((C / 8) + -4))) + (-3 + _i2))]) + (4 * _arr_29_22[(((_i0 * (((R / 8) + -4) * ((C / 8) + -4))) + ((((_i1 + 1) / 2) - 3) * ((C / 8) + -4))) + (-3 + _i2))])) * 0.125);
        }
      }
    }
  }
  /* users : ['Ux_2_img1'] */
  float * _arr_30_29;
  _arr_30_29 = (float *) (pool_allocate((sizeof(float) * ((3 * ((R / 4) + -12)) * ((C / 8) + -4)))));
  for (int _o = 0; (_o <= 1); _o = (_o + 1))
  {
    for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
    {
      #pragma omp parallel for schedule(static)
      for (int _i1 = (-(_o) + 8); (_i1 <= (_o + 520)); _i1 = (_i1 + 2))
      {
        #pragma ivdep
        for (int _i2 = 3; (_i2 <= 261); _i2 = (_i2 + 1))
        {
          _arr_30_29[(((_i0 * (((R / 4) + -12) * ((C / 8) + -4))) + ((_i1 - 7) * ((C / 8) + -4))) + (_i2 - 3))] = (((4 * _arr_29_20[(((_i0 * (((R / 8) + -4) * ((C / 8) + -4))) + ((((_i1 - 1) / 2) - 3) * ((C / 8) + -4))) + (-3 + _i2))]) + (4 * _arr_29_20[(((_i0 * (((R / 8) + -4) * ((C / 8) + -4))) + ((((_i1 + 1) / 2) - 3) * ((C / 8) + -4))) + (-3 + _i2))])) * 0.125);
        }
      }
    }
  }
  #pragma omp parallel for schedule(static)
  for (int _T_i1 = -1; (_T_i1 <= 130); _T_i1 = (_T_i1 + 1))
  {
    /* users : ['Res_3'] */
    float _buf_17_30[((3 * 7) * 37)];
    /* users : ['Uy_2_img1'] */
    float _buf_18_31[((3 * 13) * 73)];
    /* users : ['Col_2', 'Uy_2_img2'] */
    float _buf_18_32[((3 * 13) * 73)];
    /* users : ['Col_2_x'] */
    float _buf_16_33[((3 * 13) * 37)];
    /* users : ['Res_2'] */
    float _buf_18_34[((3 * 13) * 73)];
    /* users : ['Col_1_x'] */
    float _buf_19_35[((3 * 26) * 73)];
    /* users : ['Col_1'] */
    float _buf_20_36[((3 * 26) * 146)];
    /* users : ['blend_x'] */
    float _buf_21_37[((3 * 52) * 146)];
    for (int _T_i2 = -1; (_T_i2 <= 8); _T_i2 = (_T_i2 + 1))
    {
      for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        int _ct115 = ((261 < ((2 * _T_i1) + 6))? 261: ((2 * _T_i1) + 6));
        int _ct116 = ((3 > ((2 * _T_i1) + 1))? 3: ((2 * _T_i1) + 1));
        for (int _i1 = _ct116; (_i1 <= _ct115); _i1 = (_i1 + 1))
        {
          int _ct117 = ((261 < ((32 * _T_i2) + 36))? 261: ((32 * _T_i2) + 36));
          int _ct118 = ((3 > ((32 * _T_i2) + 1))? 3: ((32 * _T_i2) + 1));
          #pragma ivdep
          for (int _i2 = _ct118; (_i2 <= _ct117); _i2 = (_i2 + 1))
          {
            _buf_17_30[(((_i0 * (7 * 37)) + (((-2 * _T_i1) + _i1) * 37)) + ((-32 * _T_i2) + _i2))] = ((_arr_29_20[(((_i0 * (((R / 8) + -4) * ((C / 8) + -4))) + ((-3 + _i1) * ((C / 8) + -4))) + (-3 + _i2))] * _arr_27_18[(((-3 + _i1) * ((C / 8) + -4)) + (-3 + _i2))]) + (_arr_29_22[(((_i0 * (((R / 8) + -4) * ((C / 8) + -4))) + ((-3 + _i1) * ((C / 8) + -4))) + (-3 + _i2))] * (1 - _arr_27_18[(((-3 + _i1) * ((C / 8) + -4)) + (-3 + _i2))])));
          }
        }
      }
      for (int _o = 1; (_o <= 2); _o = (_o + 1))
      {
        for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
        {
          int _ct119 = ((521 < ((4 * _T_i1) + 12))? 521: ((4 * _T_i1) + 12));
          int _ct120 = ((7 > ((4 * _T_i1) + 1))? 7: ((4 * _T_i1) + 1));
          for (int _i1 = _ct120; (_i1 <= _ct119); _i1 = (_i1 + 1))
          {
            int _ct121 = (((((64 * _T_i2) - _o) + 73) < (_o + 519))? (((64 * _T_i2) - _o) + 73): (_o + 519));
            int _ct122 = (((((64 * _T_i2) - _o) + 3) > (-(_o) + 9))? (((64 * _T_i2) - _o) + 3): (-(_o) + 9));
            #pragma ivdep
            for (int _i2 = _ct122; (_i2 <= _ct121); _i2 = (_i2 + 2))
            {
              _buf_18_31[(((_i0 * (13 * 73)) + (((-4 * _T_i1) + _i1) * 73)) + ((-64 * _T_i2) + _i2))] = (_arr_23_9[(((_i0 * (((R / 4) + -3) * ((C / 4) + -3))) + ((-2 + _i1) * ((C / 4) + -3))) + (-2 + _i2))] - (((4 * _arr_30_29[(((_i0 * (((R / 4) + -12) * ((C / 8) + -4))) + ((-7 + _i1) * ((C / 8) + -4))) + (((_i2 - 1) / 2) - 3))]) + (4 * _arr_30_29[(((_i0 * (((R / 4) + -12) * ((C / 8) + -4))) + ((-7 + _i1) * ((C / 8) + -4))) + (((_i2 + 1) / 2) - 3))])) * 0.125));
            }
          }
        }
      }
      for (int _o = 3; (_o <= 4); _o = (_o + 1))
      {
        for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
        {
          int _ct123 = ((521 < ((4 * _T_i1) + 12))? 521: ((4 * _T_i1) + 12));
          int _ct124 = ((7 > ((4 * _T_i1) + 1))? 7: ((4 * _T_i1) + 1));
          for (int _i1 = _ct124; (_i1 <= _ct123); _i1 = (_i1 + 1))
          {
            int _ct125 = (((((64 * _T_i2) - _o) + 75) < (_o + 517))? (((64 * _T_i2) - _o) + 75): (_o + 517));
            int _ct126 = (((((64 * _T_i2) - _o) + 5) > (-(_o) + 11))? (((64 * _T_i2) - _o) + 5): (-(_o) + 11));
            #pragma ivdep
            for (int _i2 = _ct126; (_i2 <= _ct125); _i2 = (_i2 + 2))
            {
              _buf_18_32[(((_i0 * (13 * 73)) + (((-4 * _T_i1) + _i1) * 73)) + ((-64 * _T_i2) + _i2))] = (_arr_23_11[(((_i0 * (((R / 4) + -3) * ((C / 4) + -3))) + ((-2 + _i1) * ((C / 4) + -3))) + (-2 + _i2))] - (((4 * _arr_30_28[(((_i0 * (((R / 4) + -12) * ((C / 8) + -4))) + ((-7 + _i1) * ((C / 8) + -4))) + (((_i2 - 1) / 2) - 3))]) + (4 * _arr_30_28[(((_i0 * (((R / 4) + -12) * ((C / 8) + -4))) + ((-7 + _i1) * ((C / 8) + -4))) + (((_i2 + 1) / 2) - 3))])) * 0.125));
            }
          }
        }
      }
      for (int _o = 5; (_o <= 6); _o = (_o + 1))
      {
        for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
        {
          int _ct127 = (((((4 * _T_i1) - _o) + 17) < (_o + 515))? (((4 * _T_i1) - _o) + 17): (_o + 515));
          int _ct128 = (((((4 * _T_i1) + _o) - 5) > (-(_o) + 13))? (((4 * _T_i1) + _o) - 5): (-(_o) + 13));
          for (int _i1 = _ct128; (_i1 <= _ct127); _i1 = (_i1 + 2))
          {
            int _ct129 = ((261 < ((32 * _T_i2) + 36))? 261: ((32 * _T_i2) + 36));
            int _ct130 = ((3 > (32 * _T_i2))? 3: (32 * _T_i2));
            #pragma ivdep
            for (int _i2 = _ct130; (_i2 <= _ct129); _i2 = (_i2 + 1))
            {
              _buf_16_33[(((_i0 * (13 * 37)) + (((-4 * _T_i1) + _i1) * 37)) + ((-32 * _T_i2) + _i2))] = (((4 * _buf_17_30[(((_i0 * (7 * 37)) + (((-1 + ((-4 * _T_i1) + _i1)) / 2) * 37)) + ((-32 * _T_i2) + _i2))]) + (4 * _buf_17_30[(((_i0 * (7 * 37)) + (((1 + ((-4 * _T_i1) + _i1)) / 2) * 37)) + ((-32 * _T_i2) + _i2))])) * 0.125);
            }
          }
        }
      }
      for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
      {
        int _ct131 = ((521 < ((4 * _T_i1) + 12))? 521: ((4 * _T_i1) + 12));
        int _ct132 = ((7 > (4 * _T_i1))? 7: (4 * _T_i1));
        for (int _i1 = _ct132; (_i1 <= _ct131); _i1 = (_i1 + 1))
        {
          int _ct133 = ((521 < ((64 * _T_i2) + 72))? 521: ((64 * _T_i2) + 72));
          int _ct134 = ((7 > (64 * _T_i2))? 7: (64 * _T_i2));
          #pragma ivdep
          for (int _i2 = _ct134; (_i2 <= _ct133); _i2 = (_i2 + 1))
          {
            _buf_18_34[(((_i0 * (13 * 73)) + (((-4 * _T_i1) + _i1) * 73)) + ((-64 * _T_i2) + _i2))] = ((_buf_18_31[(((_i0 * (13 * 73)) + (((-4 * _T_i1) + _i1) * 73)) + ((-64 * _T_i2) + _i2))] * _arr_26_7[(((-2 + _i1) * ((C / 4) + -3)) + (-2 + _i2))]) + (_buf_18_32[(((_i0 * (13 * 73)) + (((-4 * _T_i1) + _i1) * 73)) + ((-64 * _T_i2) + _i2))] * (1 - _arr_26_7[(((-2 + _i1) * ((C / 4) + -3)) + (-2 + _i2))])));
          }
        }
      }
      for (int _o = 8; (_o <= 9); _o = (_o + 1))
      {
        for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
        {
          int _ct135 = ((521 < ((4 * _T_i1) + 12))? 521: ((4 * _T_i1) + 12));
          int _ct136 = ((7 > ((4 * _T_i1) + 1))? 7: ((4 * _T_i1) + 1));
          for (int _i1 = _ct136; (_i1 <= _ct135); _i1 = (_i1 + 1))
          {
            int _ct137 = (((((64 * _T_i2) - _o) + 80) < (_o + 512))? (((64 * _T_i2) - _o) + 80): (_o + 512));
            int _ct138 = (((((64 * _T_i2) - _o) + 10) > (-(_o) + 16))? (((64 * _T_i2) - _o) + 10): (-(_o) + 16));
            #pragma ivdep
            for (int _i2 = _ct138; (_i2 <= _ct137); _i2 = (_i2 + 2))
            {
              _buf_18_32[(((_i0 * (13 * 73)) + (((-4 * _T_i1) + _i1) * 73)) + ((-64 * _T_i2) + _i2))] = (_buf_18_34[(((_i0 * (13 * 73)) + (((-4 * _T_i1) + _i1) * 73)) + ((-64 * _T_i2) + _i2))] + (((4 * _buf_16_33[(((_i0 * (13 * 37)) + (((-4 * _T_i1) + _i1) * 37)) + ((-1 + ((-64 * _T_i2) + _i2)) / 2))]) + (4 * _buf_16_33[(((_i0 * (13 * 37)) + (((-4 * _T_i1) + _i1) * 37)) + ((1 + ((-64 * _T_i2) + _i2)) / 2))])) * 0.125));
            }
          }
        }
      }
      for (int _o = 10; (_o <= 11); _o = (_o + 1))
      {
        for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
        {
          int _ct139 = (((((8 * _T_i1) - _o) + 32) < (-(_o) + 1050))? (((8 * _T_i1) - _o) + 32): (-(_o) + 1050));
          int _ct140 = (((((8 * _T_i1) - _o) + 14) > (-(_o) + 26))? (((8 * _T_i1) - _o) + 14): (-(_o) + 26));
          for (int _i1 = _ct140; (_i1 <= _ct139); _i1 = (_i1 + 2))
          {
            int _ct141 = ((521 < ((64 * _T_i2) + 71))? 521: ((64 * _T_i2) + 71));
            int _ct142 = ((7 > ((64 * _T_i2) + 2))? 7: ((64 * _T_i2) + 2));
            #pragma ivdep
            for (int _i2 = _ct142; (_i2 <= _ct141); _i2 = (_i2 + 1))
            {
              _buf_19_35[(((_i0 * (26 * 73)) + (((-8 * _T_i1) + _i1) * 73)) + ((-64 * _T_i2) + _i2))] = (((4 * _buf_18_32[(((_i0 * (13 * 73)) + (((-1 + ((-8 * _T_i1) + _i1)) / 2) * 73)) + ((-64 * _T_i2) + _i2))]) + (4 * _buf_18_32[(((_i0 * (13 * 73)) + (((1 + ((-8 * _T_i1) + _i1)) / 2) * 73)) + ((-64 * _T_i2) + _i2))])) * 0.125);
            }
          }
        }
      }
      if ((_T_i2 >= 0))
      {
        for (int _o = 12; (_o <= 13); _o = (_o + 1))
        {
          for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
          {
            int _ct143 = ((1040 < ((8 * _T_i1) + 21))? 1040: ((8 * _T_i1) + 21));
            int _ct144 = ((15 > ((8 * _T_i1) + 5))? 15: ((8 * _T_i1) + 5));
            for (int _i1 = _ct144; (_i1 <= _ct143); _i1 = (_i1 + 1))
            {
              int _ct145 = (((((128 * _T_i2) + _o) + 128) < (-(_o) + 1052))? (((128 * _T_i2) + _o) + 128): (-(_o) + 1052));
              int _ct146 = (((((128 * _T_i2) - _o) + 18) > (-(_o) + 28))? (((128 * _T_i2) - _o) + 18): (-(_o) + 28));
              #pragma ivdep
              for (int _i2 = _ct146; (_i2 <= _ct145); _i2 = (_i2 + 2))
              {
                _buf_20_36[(((_i0 * (26 * 146)) + (((-8 * _T_i1) + _i1) * 146)) + ((-128 * _T_i2) + _i2))] = (_arr_24_27[(((_i0 * (((R / 2) + -2) * ((C / 2) + -2))) + ((-15 + _i1) * ((C / 2) + -2))) + (-15 + _i2))] + (((4 * _buf_19_35[(((_i0 * (26 * 73)) + (((-8 * _T_i1) + _i1) * 73)) + ((-1 + ((-128 * _T_i2) + _i2)) / 2))]) + (4 * _buf_19_35[(((_i0 * (26 * 73)) + (((-8 * _T_i1) + _i1) * 73)) + ((1 + ((-128 * _T_i2) + _i2)) / 2))])) * 0.125));
              }
            }
          }
        }
      }
      if (((_T_i1 >= 0) && (_T_i1 <= 129)))
      {
        for (int _o = 14; (_o <= 15); _o = (_o + 1))
        {
          for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
          {
            int _ct147 = (((((16 * _T_i1) + _o) + 24) < (-(_o) + 2092))? (((16 * _T_i1) + _o) + 24): (-(_o) + 2092));
            int _ct148 = (((((16 * _T_i1) + _o) - 2) > (-(_o) + 46))? (((16 * _T_i1) + _o) - 2): (-(_o) + 46));
            for (int _i1 = _ct148; (_i1 <= _ct147); _i1 = (_i1 + 2))
            {
              int _ct149 = ((1040 < ((128 * _T_i2) + 139))? 1040: ((128 * _T_i2) + 139));
              int _ct150 = ((15 > ((128 * _T_i2) + 6))? 15: ((128 * _T_i2) + 6));
              #pragma ivdep
              for (int _i2 = _ct150; (_i2 <= _ct149); _i2 = (_i2 + 1))
              {
                _buf_21_37[(((_i0 * (52 * 146)) + (((-16 * _T_i1) + _i1) * 146)) + ((-128 * _T_i2) + _i2))] = (((4 * _buf_20_36[(((_i0 * (26 * 146)) + (((-1 + ((-16 * _T_i1) + _i1)) / 2) * 146)) + ((-128 * _T_i2) + _i2))]) + (4 * _buf_20_36[(((_i0 * (26 * 146)) + (((1 + ((-16 * _T_i1) + _i1)) / 2) * 146)) + ((-128 * _T_i2) + _i2))])) * 0.125);
              }
            }
          }
        }
      }
      for (int _o = 16; (_o <= 17); _o = (_o + 1))
      {
        for (int _i0 = 0; (_i0 <= 2); _i0 = (_i0 + 1))
        {
          int _ct151 = ((2078 < ((16 * _T_i1) + 36))? 2078: ((16 * _T_i1) + 36));
          int _ct152 = ((31 > ((16 * _T_i1) + 15))? 31: ((16 * _T_i1) + 15));
          for (int _i1 = _ct152; (_i1 <= _ct151); _i1 = (_i1 + 1))
          {
            int _ct153 = (((((256 * _T_i2) - _o) + 292) < (-(_o) + 2094))? (((256 * _T_i2) - _o) + 292): (-(_o) + 2094));
            int _ct154 = (((((256 * _T_i2) - _o) + 32) > (-(_o) + 48))? (((256 * _T_i2) - _o) + 32): (-(_o) + 48));
            #pragma ivdep
            for (int _i2 = _ct154; (_i2 <= _ct153); _i2 = (_i2 + 2))
            {
              blend[(((_i0 * ((-60 + R) * (-60 + C))) + ((_i1 - 31) * (-60 + C))) + (_i2 - 31))] = (_arr_28_16[(((_i0 * ((-60 + R) * (-60 + C))) + ((-31 + _i1) * (-60 + C))) + (-31 + _i2))] + (((4 * _buf_21_37[(((_i0 * (52 * 146)) + (((-16 * _T_i1) + _i1) * 146)) + ((-1 + ((-256 * _T_i2) + _i2)) / 2))]) + (4 * _buf_21_37[(((_i0 * (52 * 146)) + (((-16 * _T_i1) + _i1) * 146)) + ((1 + ((-256 * _T_i2) + _i2)) / 2))])) * 0.125));
            }
          }
        }
      }
    }
  }
  pool_deallocate(_arr_28_16);
  pool_deallocate(_arr_23_11);
  pool_deallocate(_arr_26_7);
  pool_deallocate(_arr_30_28);
  pool_deallocate(_arr_30_29);
  pool_deallocate(_arr_29_20);
  pool_deallocate(_arr_23_9);
  pool_deallocate(_arr_24_27);
  pool_deallocate(_arr_29_22);
  pool_deallocate(_arr_27_18);
}